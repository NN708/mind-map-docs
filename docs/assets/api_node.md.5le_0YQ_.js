import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.B358x4hV.js";const q=JSON.parse('{"title":"Node实例","description":"","frontmatter":{},"headers":[],"relativePath":"api/node.md","filePath":"api/node.md"}'),i={name:"api/node.md"},r=o('<h1 id="node实例" tabindex="-1">Node实例 <a class="header-anchor" href="#node实例" aria-label="Permalink to &quot;Node实例&quot;">​</a></h1><p>每个节点都会实例化一个<code>node</code>实例</p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="nodedata" tabindex="-1">nodeData <a class="header-anchor" href="#nodedata" aria-label="Permalink to &quot;nodeData&quot;">​</a></h3><p>该节点对应的真实数据</p><h3 id="uid" tabindex="-1">uid <a class="header-anchor" href="#uid" aria-label="Permalink to &quot;uid&quot;">​</a></h3><p>该节点唯一的标识</p><h3 id="isroot" tabindex="-1">isRoot <a class="header-anchor" href="#isroot" aria-label="Permalink to &quot;isRoot&quot;">​</a></h3><p>是否是根节点</p><h3 id="layerindex" tabindex="-1">layerIndex <a class="header-anchor" href="#layerindex" aria-label="Permalink to &quot;layerIndex&quot;">​</a></h3><p>节点层级</p><h3 id="width" tabindex="-1">width <a class="header-anchor" href="#width" aria-label="Permalink to &quot;width&quot;">​</a></h3><p>节点的宽</p><h3 id="height" tabindex="-1">height <a class="header-anchor" href="#height" aria-label="Permalink to &quot;height&quot;">​</a></h3><p>节点的高</p><h3 id="left" tabindex="-1">left <a class="header-anchor" href="#left" aria-label="Permalink to &quot;left&quot;">​</a></h3><p>节点的<code>left</code>位置</p><h3 id="top" tabindex="-1">top <a class="header-anchor" href="#top" aria-label="Permalink to &quot;top&quot;">​</a></h3><p>节点的<code>top</code>位置</p><h3 id="parent" tabindex="-1">parent <a class="header-anchor" href="#parent" aria-label="Permalink to &quot;parent&quot;">​</a></h3><p>节点的父节点</p><h3 id="children" tabindex="-1">children <a class="header-anchor" href="#children" aria-label="Permalink to &quot;children&quot;">​</a></h3><p>节点的子节点列表</p><h3 id="group" tabindex="-1">group <a class="header-anchor" href="#group" aria-label="Permalink to &quot;group&quot;">​</a></h3><p>节点是内容容器，<code>svg</code>对象</p><h3 id="isdrag" tabindex="-1">isDrag <a class="header-anchor" href="#isdrag" aria-label="Permalink to &quot;isDrag&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>节点是否正在拖拽中</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="active" tabindex="-1">active() <a class="header-anchor" href="#active" aria-label="Permalink to &quot;active()&quot;">​</a></h3><p>手动激活该节点，当前其他已激活节点会失去激活。</p><h3 id="checkisinclient-padding-0" tabindex="-1">checkIsInClient(padding = 0) <a class="header-anchor" href="#checkisinclient-padding-0" aria-label="Permalink to &quot;checkIsInClient(padding = 0)&quot;">​</a></h3><blockquote><p>v0.10.4+</p></blockquote><ul><li><code>padding</code>: Number, 向画布四周延伸的区域大小</li></ul><p>判断节点是否处于画布可视区域。</p><h3 id="deactivate" tabindex="-1">deactivate() <a class="header-anchor" href="#deactivate" aria-label="Permalink to &quot;deactivate()&quot;">​</a></h3><blockquote><p>0.9.11+</p></blockquote><p>取消激活该节点。</p><h3 id="getancestornodes" tabindex="-1">getAncestorNodes() <a class="header-anchor" href="#getancestornodes" aria-label="Permalink to &quot;getAncestorNodes()&quot;">​</a></h3><blockquote><p>v0.9.9+</p></blockquote><p>获取祖先节点实例列表。</p><h3 id="highlight" tabindex="-1">highlight() <a class="header-anchor" href="#highlight" aria-label="Permalink to &quot;highlight()&quot;">​</a></h3><blockquote><p>v0.9.8+</p></blockquote><p>高亮节点。</p><h3 id="closehighlight" tabindex="-1">closeHighlight() <a class="header-anchor" href="#closehighlight" aria-label="Permalink to &quot;closeHighlight()&quot;">​</a></h3><blockquote><p>v0.9.8+</p></blockquote><p>取消高亮节点。</p><h3 id="getpuredata-removeactivestate-true-removeid-false" tabindex="-1">getPureData(removeActiveState = true, removeId = false) <a class="header-anchor" href="#getpuredata-removeactivestate-true-removeid-false" aria-label="Permalink to &quot;getPureData(removeActiveState = true, removeId = false)&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><ul><li><p><code>removeActiveState</code>：是否移除节点的激活状态</p></li><li><p><code>removeId</code>：是否移除节点的uid字段</p></li></ul><p>序列化节点，获取该节点的纯数据，不包含对节点实例的引用。</p><h3 id="setgeneralizationopacity-val" tabindex="-1">setGeneralizationOpacity(val) <a class="header-anchor" href="#setgeneralizationopacity-val" aria-label="Permalink to &quot;setGeneralizationOpacity(val)&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><ul><li><code>val</code>：Number, 0-1，透明度</li></ul><p>设置概要节点及曲线的透明度。</p><h3 id="formatgetgeneralization" tabindex="-1">formatGetGeneralization() <a class="header-anchor" href="#formatgetgeneralization" aria-label="Permalink to &quot;formatGetGeneralization()&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><p>获取节点概要数据。</p><h3 id="getindexinbrothers" tabindex="-1">getIndexInBrothers() <a class="header-anchor" href="#getindexinbrothers" aria-label="Permalink to &quot;getIndexInBrothers()&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><p>获取该节点在兄弟节点列表中的索引。</p><h3 id="getrectinsvg" tabindex="-1">getRectInSvg() <a class="header-anchor" href="#getrectinsvg" aria-label="Permalink to &quot;getRectInSvg()&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><p>获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置信息相对于画布。</p><h3 id="getrect" tabindex="-1">getRect() <a class="header-anchor" href="#getrect" aria-label="Permalink to &quot;getRect()&quot;">​</a></h3><blockquote><p>v0.8.1+</p></blockquote><p>获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置是相对于浏览器窗口左上角的位置。</p><h3 id="ancestorhasgeneralization" tabindex="-1">ancestorHasGeneralization() <a class="header-anchor" href="#ancestorhasgeneralization" aria-label="Permalink to &quot;ancestorHasGeneralization()&quot;">​</a></h3><blockquote><p>v0.8.1+</p></blockquote><p>检查是否存在有概要的祖先节点。</p><h3 id="getnotecontentposition" tabindex="-1">getNoteContentPosition() <a class="header-anchor" href="#getnotecontentposition" aria-label="Permalink to &quot;getNoteContentPosition()&quot;">​</a></h3><blockquote><p>v0.8.1+</p></blockquote><p>获取节点备注显示位置。当节点存在备注且正在显示状态时，如果拖动或缩放会导致备注浮层和节点脱离，那么可以通过该方法获取新位置更新备注浮层。</p><h3 id="updatenodebyactive-active" tabindex="-1">updateNodeByActive(active) <a class="header-anchor" href="#updatenodebyactive-active" aria-label="Permalink to &quot;updateNodeByActive(active)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>active</code>：Boolean，激活状态。</li></ul><p>根据是否激活更新节点。主要是更新节点的展开收起按钮的显示隐藏。</p><h3 id="setopacity-val" tabindex="-1">setOpacity(val) <a class="header-anchor" href="#setopacity-val" aria-label="Permalink to &quot;setOpacity(val)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>val</code>：透明度，0-1</li></ul><p>设置节点透明度，包括连接线和下级节点。</p><h3 id="hidechildren" tabindex="-1">hideChildren() <a class="header-anchor" href="#hidechildren" aria-label="Permalink to &quot;hideChildren()&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><p>隐藏下级节点。</p><h3 id="showchildren" tabindex="-1">showChildren() <a class="header-anchor" href="#showchildren" aria-label="Permalink to &quot;showChildren()&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><p>显示下级节点。</p><h3 id="hascustomstyle" tabindex="-1">hasCustomStyle() <a class="header-anchor" href="#hascustomstyle" aria-label="Permalink to &quot;hasCustomStyle()&quot;">​</a></h3><blockquote><p>v0.6.2+</p></blockquote><p>获取是否设置了自定义样式。</p><h3 id="getsize" tabindex="-1">getSize() <a class="header-anchor" href="#getsize" aria-label="Permalink to &quot;getSize()&quot;">​</a></h3><p>通过重新创建节点内容更新节点的宽高，返回一个布尔值，代表是否宽高发生了变化</p><h3 id="render" tabindex="-1">render() <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render()&quot;">​</a></h3><p>递归渲染该节点及其所有子节点</p><h3 id="updatenodeshape" tabindex="-1">updateNodeShape() <a class="header-anchor" href="#updatenodeshape" aria-label="Permalink to &quot;updateNodeShape()&quot;">​</a></h3><blockquote><p>v0.5.0+</p></blockquote><p>更新节点形状节点。比如当节点状态改变后，调用该方法显示或取消激活样式。</p><h3 id="remove" tabindex="-1">remove() <a class="header-anchor" href="#remove" aria-label="Permalink to &quot;remove()&quot;">​</a></h3><p>递归删除，只是从画布删除，节点容器还在，后续还可以重新插回画布</p><h3 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h3><blockquote><p>v0.5.0+</p></blockquote><p>销毁节点，不但会从画布删除，而且原节点直接置空，后续无法再插回画布</p><h3 id="renderline" tabindex="-1">renderLine() <a class="header-anchor" href="#renderline" aria-label="Permalink to &quot;renderLine()&quot;">​</a></h3><p>重新渲染该节点到其子节点之间的连线</p><h3 id="removeline" tabindex="-1">removeLine() <a class="header-anchor" href="#removeline" aria-label="Permalink to &quot;removeLine()&quot;">​</a></h3><p>移除该节点到其子节点之间的连线</p><h3 id="renderexpandbtn" tabindex="-1">renderExpandBtn() <a class="header-anchor" href="#renderexpandbtn" aria-label="Permalink to &quot;renderExpandBtn()&quot;">​</a></h3><p>渲染展开收缩按钮的内容</p><h3 id="removeexpandbtn" tabindex="-1">removeExpandBtn() <a class="header-anchor" href="#removeexpandbtn" aria-label="Permalink to &quot;removeExpandBtn()&quot;">​</a></h3><p>移除展开收缩按钮</p><h3 id="getstyle-prop-root-isactive" tabindex="-1">getStyle(prop, root, isActive) <a class="header-anchor" href="#getstyle-prop-root-isactive" aria-label="Permalink to &quot;getStyle(prop, root, isActive)&quot;">​</a></h3><p>获取某个最终应用到该节点的样式值</p><p><code>prop</code>：要获取的样式属性</p><p><code>root</code>：是否是根节点，默认<code>false</code></p><p><code>isActive</code>：v0.7.0+已废弃，获取的是否是激活状态的样式值，默认<code>false</code></p><h3 id="setstyle-prop-value-isactive" tabindex="-1">setStyle(prop, value, isActive) <a class="header-anchor" href="#setstyle-prop-value-isactive" aria-label="Permalink to &quot;setStyle(prop, value, isActive)&quot;">​</a></h3><p><code>isActive</code>：v0.7.0+已废弃</p><p>修改节点的某个样式，<code>SET_NODE_STYLE</code>命令的快捷方法</p><h3 id="setstyles-style-isactive" tabindex="-1">setStyles(style, isActive) <a class="header-anchor" href="#setstyles-style-isactive" aria-label="Permalink to &quot;setStyles(style, isActive)&quot;">​</a></h3><blockquote><p>v0.6.12+</p></blockquote><p><code>isActive</code>：v0.7.0+已废弃</p><p>修改节点多个样式，<code>SET_NODE_STYLES</code>命令的快捷方法</p><h3 id="getdata-key" tabindex="-1">getData(key) <a class="header-anchor" href="#getdata-key" aria-label="Permalink to &quot;getData(key)&quot;">​</a></h3><p>获取该节点真实数据<code>nodeData</code>的<code>data</code>对象里的指定值，<code>key</code>不传返回这个<code>data</code>对象</p><h3 id="setdata-data" tabindex="-1">setData(data) <a class="header-anchor" href="#setdata-data" aria-label="Permalink to &quot;setData(data)&quot;">​</a></h3><p>设置节点数据，<code>SET_NODE_DATA</code>命令的快捷方法，这个方法和命令不会更新视图，所以如果你要修改文本，就使用<code>setText</code>方法，或者用手指文本的命令。</p><h3 id="settext-text-richtext-resetrichtext" tabindex="-1">setText(text, richText, resetRichText) <a class="header-anchor" href="#settext-text-richtext-resetrichtext" aria-label="Permalink to &quot;setText(text, richText, resetRichText)&quot;">​</a></h3><ul><li><p><code>richText</code>：v0.4.2+，<code>Boolean</code>，如果要设置的是富文本内容，也就是<code>html</code>字符，<code>richText</code>需要传<code>true</code>。在v0.9.3+版本后该参数不传会默认使用之前的值。</p></li><li><p><code>resetRichText</code>：v0.6.10+，<code>Boolean</code>，是否要复位富文本，默认为<code>false</code>，如果传<code>true</code>那么会重置富文本节点的样式</p></li></ul><p>设置节点文本，<code>SET_NODE_TEXT</code>命令的快捷方法</p><h3 id="setimage-imgdata" tabindex="-1">setImage(imgData) <a class="header-anchor" href="#setimage-imgdata" aria-label="Permalink to &quot;setImage(imgData)&quot;">​</a></h3><p>设置节点图片，<code>SET_NODE_IMAGE</code>命令的快捷方法</p><h3 id="seticon-icons" tabindex="-1">setIcon(icons) <a class="header-anchor" href="#seticon-icons" aria-label="Permalink to &quot;setIcon(icons)&quot;">​</a></h3><p>设置节点图标，<code>SET_NODE_ICON</code>命令的快捷方法</p><h3 id="sethyperlink-link-title" tabindex="-1">setHyperlink(link, title) <a class="header-anchor" href="#sethyperlink-link-title" aria-label="Permalink to &quot;setHyperlink(link, title)&quot;">​</a></h3><p>设置节点超链接，<code>SET_NODE_HYPERLINK</code>命令的快捷方法</p><h3 id="setnote-note" tabindex="-1">setNote(note) <a class="header-anchor" href="#setnote-note" aria-label="Permalink to &quot;setNote(note)&quot;">​</a></h3><p>设置节点备注，<code>SET_NODE_NOTE</code>命令的快捷方法</p><h3 id="setattachment-url-name" tabindex="-1">setAttachment(url, name) <a class="header-anchor" href="#setattachment-url-name" aria-label="Permalink to &quot;setAttachment(url, name)&quot;">​</a></h3><blockquote><p>v0.9.10+</p></blockquote><ul><li><p><code>url</code>：附件的url；</p></li><li><p><code>name</code>：附件的名称，可选</p></li></ul><p>设置节点附件，<code>SET_NODE_ATTACHMENT</code>命令的快捷方法</p><h3 id="settag-tag" tabindex="-1">setTag(tag) <a class="header-anchor" href="#settag-tag" aria-label="Permalink to &quot;setTag(tag)&quot;">​</a></h3><p>设置节点标签，<code>SET_NODE_TAG</code>的快捷方法</p><h3 id="hide" tabindex="-1">hide() <a class="header-anchor" href="#hide" aria-label="Permalink to &quot;hide()&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>隐藏节点及其下级节点</p><h3 id="show" tabindex="-1">show() <a class="header-anchor" href="#show" aria-label="Permalink to &quot;show()&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>显示节点及其下级节点</p><h3 id="isparent-node" tabindex="-1">isParent(node) <a class="header-anchor" href="#isparent-node" aria-label="Permalink to &quot;isParent(node)&quot;">​</a></h3><blockquote><p>v0.1.5+：检测当前节点是否是某个节点的祖先节点</p></blockquote><blockquote><p>v0.8.1+：检测当前节点是否是某个节点的父节点</p></blockquote><h3 id="isancestor-node" tabindex="-1">isAncestor(node) <a class="header-anchor" href="#isancestor-node" aria-label="Permalink to &quot;isAncestor(node)&quot;">​</a></h3><blockquote><p>v0.8.1+</p></blockquote><p>检测当前节点是否是某个节点的祖先节点</p><h3 id="isbrother-node" tabindex="-1">isBrother(node) <a class="header-anchor" href="#isbrother-node" aria-label="Permalink to &quot;isBrother(node)&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>检测当前节点是否是某个节点的兄弟节点</p><h3 id="checkhasgeneralization" tabindex="-1">checkHasGeneralization() <a class="header-anchor" href="#checkhasgeneralization" aria-label="Permalink to &quot;checkHasGeneralization()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>检查是否存在概要</p><h3 id="checkhasselfgeneralization" tabindex="-1">checkHasSelfGeneralization() <a class="header-anchor" href="#checkhasselfgeneralization" aria-label="Permalink to &quot;checkHasSelfGeneralization()&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><p>检查是否存在自身的概要，非子节点区间概要</p><h3 id="hidegeneralization" tabindex="-1">hideGeneralization() <a class="header-anchor" href="#hidegeneralization" aria-label="Permalink to &quot;hideGeneralization()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>隐藏概要节点</p><h3 id="showgeneralization" tabindex="-1">showGeneralization() <a class="header-anchor" href="#showgeneralization" aria-label="Permalink to &quot;showGeneralization()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>显示概要节点</p><h3 id="updategeneralization" tabindex="-1">updateGeneralization() <a class="header-anchor" href="#updategeneralization" aria-label="Permalink to &quot;updateGeneralization()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>更新概要节点</p><h3 id="hascustomposition" tabindex="-1">hasCustomPosition() <a class="header-anchor" href="#hascustomposition" aria-label="Permalink to &quot;hasCustomPosition()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>检查节点是否存在自定义数据</p><h3 id="ancestorhascustomposition" tabindex="-1">ancestorHasCustomPosition() <a class="header-anchor" href="#ancestorhascustomposition" aria-label="Permalink to &quot;ancestorHasCustomPosition()&quot;">​</a></h3><blockquote><p>v0.2.0+</p></blockquote><p>检查节点是否存在自定义位置的祖先节点</p><h3 id="getshape" tabindex="-1">getShape() <a class="header-anchor" href="#getshape" aria-label="Permalink to &quot;getShape()&quot;">​</a></h3><blockquote><p>v0.2.4+</p></blockquote><p>获取节点形状</p><h3 id="setshape-shape" tabindex="-1">setShape(shape) <a class="header-anchor" href="#setshape-shape" aria-label="Permalink to &quot;setShape(shape)&quot;">​</a></h3><blockquote><p>v0.2.4+</p></blockquote><p>设置节点形状，<code>SET_NODE_SHAPE</code>命令的快捷方法</p><h3 id="getselfstyle-prop" tabindex="-1">getSelfStyle(prop) <a class="header-anchor" href="#getselfstyle-prop" aria-label="Permalink to &quot;getSelfStyle(prop)&quot;">​</a></h3><blockquote><p>v0.2.5+</p></blockquote><p>获取节点自身的自定义样式</p><h3 id="getparentselfstyle-prop" tabindex="-1">getParentSelfStyle(prop) <a class="header-anchor" href="#getparentselfstyle-prop" aria-label="Permalink to &quot;getParentSelfStyle(prop)&quot;">​</a></h3><blockquote><p>v0.2.5+</p></blockquote><p>获取最近一个存在自身自定义样式的祖先节点的自定义样式</p><h3 id="getselfinhertstyle-prop" tabindex="-1">getSelfInhertStyle(prop) <a class="header-anchor" href="#getselfinhertstyle-prop" aria-label="Permalink to &quot;getSelfInhertStyle(prop)&quot;">​</a></h3><blockquote><p>v0.2.5+</p></blockquote><p>获取自身可继承的自定义样式</p>',194),l=[r];function h(n,c,d,s,p,u){return t(),a("div",null,l)}const k=e(i,[["render",h]]);export{q as __pageData,k as default};
