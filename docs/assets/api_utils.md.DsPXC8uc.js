import{_ as a,o as e,c as s,a5 as i}from"./chunks/framework.D1Ej91Qw.js";const g=JSON.parse('{"title":"内置工具方法","description":"","frontmatter":{},"headers":[],"relativePath":"api/utils.md","filePath":"api/utils.md"}'),t={name:"api/utils.md"},l=i(`<h1 id="内置工具方法" tabindex="-1">内置工具方法 <a class="header-anchor" href="#内置工具方法" aria-label="Permalink to &quot;内置工具方法&quot;">​</a></h1><h2 id="基础工具方法" tabindex="-1">基础工具方法 <a class="header-anchor" href="#基础工具方法" aria-label="Permalink to &quot;基础工具方法&quot;">​</a></h2><p>引用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {walk, ...} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils&#39;</span></span></code></pre></div><h3 id="resizeimgsizebyoriginratio-width-height-newwidth-newheight" tabindex="-1">resizeImgSizeByOriginRatio(width, height, newWidth, newHeight) <a class="header-anchor" href="#resizeimgsizebyoriginratio-width-height-newwidth-newheight" aria-label="Permalink to &quot;resizeImgSizeByOriginRatio(width, height, newWidth, newHeight)&quot;">​</a></h3><blockquote><p>v0.6.5+</p></blockquote><p><code>width</code>: 图片原始的宽度</p><p><code>height</code>：图片原始的高度</p><p><code>newWidth</code>：要缩放到的宽度</p><p><code>newHeight</code>：要缩放到的高度</p><p>按比例缩放图片。在保持图片原始宽高比的情况下缩放到指定的<code>newWidth</code>、<code>newHeight</code>大小。</p><h3 id="walk-root-parent-beforecallback-aftercallback-isroot-layerindex-0-index-0-ancestors" tabindex="-1">walk(root, parent, beforeCallback, afterCallback, isRoot, layerIndex = 0, index = 0, ancestors = []) <a class="header-anchor" href="#walk-root-parent-beforecallback-aftercallback-isroot-layerindex-0-index-0-ancestors" aria-label="Permalink to &quot;walk(root, parent, beforeCallback, afterCallback, isRoot, layerIndex = 0, index = 0, ancestors = [])&quot;">​</a></h3><p>深度优先遍历树</p><p><code>root</code>：要遍历的树的根节点</p><p><code>parent</code>：父节点</p><p><code>beforeCallback</code>：前序遍历回调函数，回调参数为：root, parent, isRoot, layerIndex, index, ancestors</p><p><code>afterCallback</code>：后序遍历回调函数，回调参数为：root, parent, isRoot, layerIndex, index, ancestors</p><p><code>isRoot</code>：是否是根节点</p><p><code>layerIndex</code>：节点层级</p><p><code>index</code>：节点在同级节点里的索引</p><p><code>ancestors</code>：v0.10.6+，当前节点的所有祖先节点列表</p><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tree,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="bfswalk-root-callback" tabindex="-1">bfsWalk(root, callback) <a class="header-anchor" href="#bfswalk-root-callback" aria-label="Permalink to &quot;bfsWalk(root, callback)&quot;">​</a></h3><p>广度优先遍历树</p><h3 id="resizeimgsize-width-height-maxwidth-maxheight" tabindex="-1">resizeImgSize(width, height, maxWidth, maxHeight) <a class="header-anchor" href="#resizeimgsize-width-height-maxwidth-maxheight" aria-label="Permalink to &quot;resizeImgSize(width, height, maxWidth, maxHeight)&quot;">​</a></h3><p>缩放图片的尺寸</p><p><code>width</code>：图片原本的宽</p><p><code>height</code>：图片原本的高</p><p><code>maxWidth</code>：要缩放到的宽</p><p><code>maxHeight</code>：要缩放到的高</p><p><code>maxWidth</code>和<code>maxHeight</code>可以同时都传，也可以只传一个</p><h3 id="resizeimg-imgurl-maxwidth-maxheight" tabindex="-1">resizeImg(imgUrl, maxWidth, maxHeight) <a class="header-anchor" href="#resizeimg-imgurl-maxwidth-maxheight" aria-label="Permalink to &quot;resizeImg(imgUrl, maxWidth, maxHeight)&quot;">​</a></h3><p>缩放图片，内部先加载图片，然后调用<code>resizeImgSize</code>方法，返回一个<code>promise</code></p><h3 id="simpledeepclone-data" tabindex="-1">simpleDeepClone(data) <a class="header-anchor" href="#simpledeepclone-data" aria-label="Permalink to &quot;simpleDeepClone(data)&quot;">​</a></h3><p>极简的深拷贝方法，只能针对全是基本数据的对象，否则会报错</p><h3 id="copyrendertree-tree-root" tabindex="-1">copyRenderTree(tree, root) <a class="header-anchor" href="#copyrendertree-tree-root" aria-label="Permalink to &quot;copyRenderTree(tree, root)&quot;">​</a></h3><p>复制渲染树数据，示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyRenderTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mindMap.renderer.renderTree)</span></span></code></pre></div><h3 id="copynodetree-tree-root-removeactivestate-removeid" tabindex="-1">copyNodeTree(tree, root, removeActiveState, removeId) <a class="header-anchor" href="#copynodetree-tree-root-removeactivestate-removeid" aria-label="Permalink to &quot;copyNodeTree(tree, root, removeActiveState, removeId)&quot;">​</a></h3><ul><li><p><code>removeActiveState</code>：<code>Boolean</code>，默认为<code>false</code>，是否移除节点的激活状态</p></li><li><p><code>removeId</code>：v0.7.3-fix.1+，是否移除节点数据中的 uid，默认为<code>true</code></p></li></ul><blockquote><ul><li><code>keepId</code>： （原第四个参数）<code>Boolean</code>，默认为<code>false</code>，是否保留被复制节点的<code>id</code>，默认会删除<code>id</code>防止节点<code>id</code>重复，但是对于移动节点的场景，节点原<code>id</code>需要保留。</li></ul></blockquote><p>复制节点树数据，主要是剔除其中的引用<code>node</code>实例的<code>_node</code>，然后复制<code>data</code>对象的数据，示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyNodeTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, node)</span></span></code></pre></div><h3 id="imgtodataurl-src-returnblob-false" tabindex="-1">imgToDataUrl(src, returnBlob = false) <a class="header-anchor" href="#imgtodataurl-src-returnblob-false" aria-label="Permalink to &quot;imgToDataUrl(src, returnBlob = false)&quot;">​</a></h3><ul><li><p><code>src</code>：图片url</p></li><li><p><code>returnBlob</code>：v0.10.2+，是否以Blob格式返回结果，默认为DataURL格式</p></li></ul><p>图片转成 dataURL</p><h3 id="downloadfile-file-filename" tabindex="-1">downloadFile(file, fileName) <a class="header-anchor" href="#downloadfile-file-filename" aria-label="Permalink to &quot;downloadFile(file, fileName)&quot;">​</a></h3><p>下载文件</p><h3 id="throttle-fn-time-300-ctx" tabindex="-1">throttle(fn, time = 300, ctx) <a class="header-anchor" href="#throttle-fn-time-300-ctx" aria-label="Permalink to &quot;throttle(fn, time = 300, ctx)&quot;">​</a></h3><p>节流函数</p><h3 id="asyncrun-tasklist-callback" tabindex="-1">asyncRun(taskList, callback = () =&gt; {}) <a class="header-anchor" href="#asyncrun-tasklist-callback" aria-label="Permalink to &quot;asyncRun(taskList, callback = () =&gt; {})&quot;">​</a></h3><p>异步执行任务队列，多个任务是同步执行的，没有先后顺序</p><h3 id="degtorad-deg" tabindex="-1">degToRad(deg) <a class="header-anchor" href="#degtorad-deg" aria-label="Permalink to &quot;degToRad(deg)&quot;">​</a></h3><blockquote><p>v0.2.24+</p></blockquote><p>角度转弧度</p><h3 id="camelcasetohyphen-str" tabindex="-1">camelCaseToHyphen(str) <a class="header-anchor" href="#camelcasetohyphen-str" aria-label="Permalink to &quot;camelCaseToHyphen(str)&quot;">​</a></h3><blockquote><p>v0.2.24+</p></blockquote><p>驼峰转连字符</p><h3 id="joinfontstr-italic-bold-fontsize-fontfamily" tabindex="-1">joinFontStr({ italic, bold, fontSize, fontFamily }) <a class="header-anchor" href="#joinfontstr-italic-bold-fontsize-fontfamily" aria-label="Permalink to &quot;joinFontStr({ italic, bold, fontSize, fontFamily })&quot;">​</a></h3><blockquote><p>v0.3.4+</p></blockquote><p>拼接<code>css</code>字体的<code>font</code>属性值</p><h3 id="measuretext-text-italic-bold-fontsize-fontfamily" tabindex="-1">measureText(text, { italic, bold, fontSize, fontFamily }) <a class="header-anchor" href="#measuretext-text-italic-bold-fontsize-fontfamily" aria-label="Permalink to &quot;measureText(text, { italic, bold, fontSize, fontFamily })&quot;">​</a></h3><blockquote><p>v0.3.4+</p></blockquote><p>测量文本的宽高，返回值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width, height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="gettextfromhtml-html" tabindex="-1">getTextFromHtml(html) <a class="header-anchor" href="#gettextfromhtml-html" aria-label="Permalink to &quot;getTextFromHtml(html)&quot;">​</a></h3><p>提取 html 字符串里的纯文本内容。</p><h3 id="readblob-blob" tabindex="-1">readBlob(blob) <a class="header-anchor" href="#readblob-blob" aria-label="Permalink to &quot;readBlob(blob)&quot;">​</a></h3><blockquote><p>v0.5.9+</p></blockquote><p>将<code>blob</code>数据转成<code>data:url</code>数据。</p><h3 id="parsedataurl-data" tabindex="-1">parseDataUrl(data) <a class="header-anchor" href="#parsedataurl-data" aria-label="Permalink to &quot;parseDataUrl(data)&quot;">​</a></h3><blockquote><p>v0.6.6+</p></blockquote><p>解析<code>data:url</code>数据，返回：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据的文件类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base64 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// base64数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="getimagesize-src" tabindex="-1">getImageSize(src) <a class="header-anchor" href="#getimagesize-src" aria-label="Permalink to &quot;getImageSize(src)&quot;">​</a></h3><blockquote><p>v0.6.6+</p></blockquote><ul><li><code>src</code>：图片的 url</li></ul><p>获取图片的大小。返回：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width, height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="loadimage-imgfile" tabindex="-1">loadImage(imgFile) <a class="header-anchor" href="#loadimage-imgfile" aria-label="Permalink to &quot;loadImage(imgFile)&quot;">​</a></h3><blockquote><p>v0.6.8+</p></blockquote><ul><li><code>imgFile</code>：图片类型的 File 对象</li></ul><p>加载图片，返回：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DataUrl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    size </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { width, height } 图片宽高</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="gettype-data" tabindex="-1">getType(data) <a class="header-anchor" href="#gettype-data" aria-label="Permalink to &quot;getType(data)&quot;">​</a></h3><blockquote><p>v0.6.9+</p></blockquote><p>获取一个数据的类型，比如<code>Boolean</code>、<code>Array</code>等。</p><h3 id="removehtmlstyle-html" tabindex="-1">removeHtmlStyle(html) <a class="header-anchor" href="#removehtmlstyle-html" aria-label="Permalink to &quot;removeHtmlStyle(html)&quot;">​</a></h3><blockquote><p>v0.6.10+</p></blockquote><p>移除 html 字符串中节点的内联样式。</p><h3 id="addhtmlstyle-html-tag-style" tabindex="-1">addHtmlStyle(html, tag, style) <a class="header-anchor" href="#addhtmlstyle-html-tag-style" aria-label="Permalink to &quot;addHtmlStyle(html, tag, style)&quot;">​</a></h3><blockquote><p>v0.6.10+</p></blockquote><p>给 html 标签中指定的标签添加内联样式。</p><h3 id="checkisrichtext-str" tabindex="-1">checkIsRichText(str) <a class="header-anchor" href="#checkisrichtext-str" aria-label="Permalink to &quot;checkIsRichText(str)&quot;">​</a></h3><blockquote><p>v0.6.10+</p></blockquote><p>检查一个字符串是否是富文本字符。</p><h3 id="iswhite-color" tabindex="-1">isWhite(color) <a class="header-anchor" href="#iswhite-color" aria-label="Permalink to &quot;isWhite(color)&quot;">​</a></h3><blockquote><p>v0.6.11+</p></blockquote><p>判断一个颜色是否是白色。</p><h3 id="istransparent-color" tabindex="-1">isTransparent(color) <a class="header-anchor" href="#istransparent-color" aria-label="Permalink to &quot;isTransparent(color)&quot;">​</a></h3><blockquote><p>v0.6.11+</p></blockquote><p>判断一个颜色是否是透明。</p><h3 id="noderichtexttotextwithwrap-html" tabindex="-1">nodeRichTextToTextWithWrap(html) <a class="header-anchor" href="#noderichtexttotextwithwrap-html" aria-label="Permalink to &quot;nodeRichTextToTextWithWrap(html)&quot;">​</a></h3><blockquote><p>v0.6.12+</p></blockquote><p>将<code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;</code>形式的节点富文本内容转换成<code>\\n</code>换行的文本。</p><h3 id="texttonoderichtextwithwrap-html" tabindex="-1">textToNodeRichTextWithWrap(html) <a class="header-anchor" href="#texttonoderichtextwithwrap-html" aria-label="Permalink to &quot;textToNodeRichTextWithWrap(html)&quot;">​</a></h3><blockquote><p>v0.6.12+</p></blockquote><p>将<code>&lt;br&gt;</code>换行的文本转换成<code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;</code>形式的节点富文本内容。</p><h3 id="ismobile" tabindex="-1">isMobile() <a class="header-anchor" href="#ismobile" aria-label="Permalink to &quot;isMobile()&quot;">​</a></h3><blockquote><p>v0.6.13+</p></blockquote><p>判断是否是移动端环境。</p><h3 id="gettopancestorsfomnodelist-list" tabindex="-1">getTopAncestorsFomNodeList(list) <a class="header-anchor" href="#gettopancestorsfomnodelist-list" aria-label="Permalink to &quot;getTopAncestorsFomNodeList(list)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>list</code>：Arrray，节点实例列表。</li></ul><p>从节点实例列表里找出最顶层的节点列表。</p><h3 id="checktworectisoverlap-minx1-maxx1-miny1-maxy1-minx2-maxx2-miny2-maxy2" tabindex="-1">checkTwoRectIsOverlap(minx1, maxx1, miny1, maxy1, minx2, maxx2, miny2, maxy2) <a class="header-anchor" href="#checktworectisoverlap-minx1-maxx1-miny1-maxy1-minx2-maxx2-miny2-maxy2" aria-label="Permalink to &quot;checkTwoRectIsOverlap(minx1, maxx1, miny1, maxy1, minx2, maxx2, miny2, maxy2)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><p>参数为两个矩形的位置。</p><p>判断两个矩形是否重叠。</p><h3 id="focusinput-el" tabindex="-1">focusInput(el) <a class="header-anchor" href="#focusinput-el" aria-label="Permalink to &quot;focusInput(el)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>el</code>：DOM 节点，可聚焦的元素，一般为输入框元素。</li></ul><p>聚焦指定输入框。</p><h3 id="selectallinput-el" tabindex="-1">selectAllInput(el) <a class="header-anchor" href="#selectallinput-el" aria-label="Permalink to &quot;selectAllInput(el)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>el</code>：DOM 节点，可聚焦的元素，一般为输入框元素。</li></ul><p>聚焦并全选指定输入框。</p><h3 id="adddatatoappointnodes-appointnodes-data" tabindex="-1">addDataToAppointNodes(appointNodes, data = {}) <a class="header-anchor" href="#adddatatoappointnodes-appointnodes-data" aria-label="Permalink to &quot;addDataToAppointNodes(appointNodes, data = {})&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><p><code>appointNodes</code>：节点实例列表，数组类型。</p></li><li><p><code>data</code>：要附加到指定节点实例列表树中所有节点的数据中的数据。</p></li></ul><p>给指定的节点列表树数据添加附加数据，会修改原数据。</p><h3 id="createuidforappointnodes-appointnodes-createnewid-handle" tabindex="-1">createUidForAppointNodes(appointNodes, createNewId, handle) <a class="header-anchor" href="#createuidforappointnodes-appointnodes-createnewid-handle" aria-label="Permalink to &quot;createUidForAppointNodes(appointNodes, createNewId, handle)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><p><code>appointNodes</code>：节点实例列表，数组类型。</p></li><li><p><code>createNewId</code>：v0.7.3-fix.1+，<code>Boolean</code>，默认为<code>false</code>，即如果节点不存在<code>uid</code>的话，会创建新的<code>uid</code>。如果传<code>true</code>，那么无论节点数据原来是否存在<code>uid</code>，都会创建新的<code>uid</code></p></li><li><p><code>handle</code>：v0.10.5+，<code>null、Function</code>，默认为<code>null</code>，可以传递一个函数，遍历到每个节点时会调用该函数，回调参数为当前遍历到的节点。</p></li></ul><p>给指定的节点列表树数据添加 uid（如果 uid 不存在的话），会修改原数据。</p><h3 id="getnodeindex-node" tabindex="-1">getNodeIndex(node) <a class="header-anchor" href="#getnodeindex-node" aria-label="Permalink to &quot;getNodeIndex(node)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>node</code>：节点实例。</li></ul><p>获取节点在同级里的位置索引。</p><h3 id="mergericonlist-list" tabindex="-1">mergerIconList(list) <a class="header-anchor" href="#mergericonlist-list" aria-label="Permalink to &quot;mergerIconList(list)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>list</code>：要合并到库内部的节点图标数组。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const data = [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;1&#39;, icon: &#39;a&#39; }, { name: 2, icon: &#39;b&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;2&#39;, icon: &#39;c&#39; }, { name: 3, icon: &#39;d&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mergerIconList(data) 结果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;1&#39;, icon: &#39;a&#39; }, { name: 2, icon: &#39;c&#39; }, { name: 3, icon: &#39;d&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ]</span></span></code></pre></div><p>合并图标数组。</p><h3 id="generatecolorbycontent-str" tabindex="-1">generateColorByContent(str) <a class="header-anchor" href="#generatecolorbycontent-str" aria-label="Permalink to &quot;generateColorByContent(str)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>str</code>：字符串。</li></ul><p>根据传入的内容生成颜色，同样的内容会生成同样的颜色。</p><h3 id="htmlescape-str" tabindex="-1">htmlEscape(str) <a class="header-anchor" href="#htmlescape-str" aria-label="Permalink to &quot;htmlEscape(str)&quot;">​</a></h3><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>str</code>：字符串。</li></ul><p>转义传入的字符串，目前会转义如下三个字符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&amp; -&gt; &amp;amp;</span></span>
<span class="line"><span>&lt; -&gt; &amp;lt;</span></span>
<span class="line"><span>&gt; -&gt; &amp;gt;</span></span></code></pre></div><h3 id="issameobject-a-b" tabindex="-1">isSameObject(a, b) <a class="header-anchor" href="#issameobject-a-b" aria-label="Permalink to &quot;isSameObject(a, b)&quot;">​</a></h3><blockquote><p>v0.7.3+</p></blockquote><ul><li><code>a</code>、<code>b</code>：Object | Array, 要进行对比的两个对象</li></ul><p>判断两个对象是否相同，只处理对象或数组。</p><h3 id="getnodedataindex-node" tabindex="-1">getNodeDataIndex(node) <a class="header-anchor" href="#getnodedataindex-node" aria-label="Permalink to &quot;getNodeDataIndex(node)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>获取节点在兄弟节点中的位置索引。</p><h3 id="getnodeindexinnodelist-node-nodelist" tabindex="-1">getNodeIndexInNodeList(node, nodeList) <a class="header-anchor" href="#getnodeindexinnodelist-node-nodelist" aria-label="Permalink to &quot;getNodeIndexInNodeList(node, nodeList)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>从一个节点列表里找出某个节点的索引。</p><h3 id="setdatatoclipboard-data" tabindex="-1">setDataToClipboard(data) <a class="header-anchor" href="#setdatatoclipboard-data" aria-label="Permalink to &quot;setDataToClipboard(data)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>data</code>：Object | Array</li></ul><p>将数据设置到用户剪切板中。</p><h3 id="getdatafromclipboard" tabindex="-1">getDataFromClipboard() <a class="header-anchor" href="#getdatafromclipboard" aria-label="Permalink to &quot;getDataFromClipboard()&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>从用户剪贴板中读取文字和图片，返回：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  text, img</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="removefromparentnodedata-node" tabindex="-1">removeFromParentNodeData(node) <a class="header-anchor" href="#removefromparentnodedata-node" aria-label="Permalink to &quot;removeFromParentNodeData(node)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>从节点的父节点的<code>nodeData.children</code>列表中移除该节点的数据。</p><h3 id="checkhassupsubrelation" tabindex="-1">checkHasSupSubRelation() <a class="header-anchor" href="#checkhassupsubrelation" aria-label="Permalink to &quot;checkHasSupSubRelation()&quot;">​</a></h3><blockquote><p>v0.8.1+</p></blockquote><p>从给定的节点实例列表里判断是否存在上下级关系。</p><h3 id="handleselfclosetags-str" tabindex="-1">handleSelfCloseTags(str) <a class="header-anchor" href="#handleselfclosetags-str" aria-label="Permalink to &quot;handleSelfCloseTags(str)&quot;">​</a></h3><blockquote><p>v0.9.1+</p></blockquote><ul><li><code>str</code>：html 字符串</li></ul><p>给 html 自闭合标签添加闭合状态，<code>&lt;div&gt;&lt;img src=&quot;xxx&quot;&gt;&lt;/div&gt;</code> -&gt; <code>&lt;div&gt;&lt;img src=&quot;xxx&quot; /&gt;&lt;/div&gt;</code>。</p><h3 id="checknodelistisequal-list1-list2" tabindex="-1">checkNodeListIsEqual(list1, list2) <a class="header-anchor" href="#checknodelistisequal-list1-list2" aria-label="Permalink to &quot;checkNodeListIsEqual(list1, list2)&quot;">​</a></h3><blockquote><p>v0.9.1+</p></blockquote><ul><li><code>list1/list2</code>：节点实例列表</li></ul><p>检查两个节点实例列表包含的节点是否是一样的。</p><h3 id="getchromeversion" tabindex="-1">getChromeVersion() <a class="header-anchor" href="#getchromeversion" aria-label="Permalink to &quot;getChromeVersion()&quot;">​</a></h3><blockquote><p>v0.9.3+</p></blockquote><p>获取当前浏览器使用的<code>Chrome</code>内核版本。如果当前浏览器使用的不是 <code>Chrome</code>内核，那么会返回空字符串。</p><h3 id="transformtreedatatoobject-data" tabindex="-1">transformTreeDataToObject(data) <a class="header-anchor" href="#transformtreedatatoobject-data" aria-label="Permalink to &quot;transformTreeDataToObject(data)&quot;">​</a></h3><blockquote><p>v0.9.3+</p></blockquote><ul><li><code>data</code>：思维导图节点数据。</li></ul><p>将思维导图树结构转平级对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    uid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                children: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>转为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [uid1, uid2],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h3 id="transformobjecttotreedata-data" tabindex="-1">transformObjectToTreeData(data) <a class="header-anchor" href="#transformobjecttotreedata-data" aria-label="Permalink to &quot;transformObjectToTreeData(data)&quot;">​</a></h3><blockquote><p>v0.9.3+</p></blockquote><p>将平级对象转树结构。transformTreeDataToObject 方法的反向操作。</p><h3 id="removehtmlnodebyclass-html-selector" tabindex="-1">removeHtmlNodeByClass(html, selector) <a class="header-anchor" href="#removehtmlnodebyclass-html-selector" aria-label="Permalink to &quot;removeHtmlNodeByClass(html, selector)&quot;">​</a></h3><blockquote><p>v0.9.6+</p></blockquote><ul><li><p><code>html</code>：html 字符串</p></li><li><p><code>selector</code>：节点选择器，比如类选择器，id 选择器</p></li></ul><p>去除指定 html 字符串中指定选择器的节点，然后返回处理后的 html 字符串。</p><h3 id="getonfullscreenevt" tabindex="-1">getOnfullscreEnevt() <a class="header-anchor" href="#getonfullscreenevt" aria-label="Permalink to &quot;getOnfullscreEnevt()&quot;">​</a></h3><blockquote><p>v0.9.11+</p></blockquote><p>检测当前浏览器可用的全屏事件。可以这样使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fullscrrenEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOnfullscreEnevt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听全屏事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullscrrenEvent, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 根据document.fullscreenElement是否为null判断当前是否处于全屏状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="fullscreen-element" tabindex="-1">fullScreen(element) <a class="header-anchor" href="#fullscreen-element" aria-label="Permalink to &quot;fullScreen(element)&quot;">​</a></h3><blockquote><p>v0.9.11+</p></blockquote><p>让指定的DOM元素进入全屏状态。</p><h3 id="exitfullscreen" tabindex="-1">exitFullScreen() <a class="header-anchor" href="#exitfullscreen" aria-label="Permalink to &quot;exitFullScreen()&quot;">​</a></h3><blockquote><p>v0.9.11+</p></blockquote><p>退出全屏状态。</p><h3 id="defensexss-htmlstr" tabindex="-1">defenseXSS(htmlStr) <a class="header-anchor" href="#defensexss-htmlstr" aria-label="Permalink to &quot;defenseXSS(htmlStr)&quot;">​</a></h3><blockquote><p>v0.10.0+</p></blockquote><ul><li><code>htmlStr</code>：需要过滤的html字符串</li></ul><p>返回：过滤后的html字符串</p><p>防御 XSS 攻击，过滤恶意 HTML 标签和属性。你可以在将节点数据传递给SimpleMindMap前递归遍历树数据，通过该方法处理节点富文本内容，避免 XSS 攻击。</p><h2 id="在-canvas-中模拟-css-的背景属性" tabindex="-1">在 canvas 中模拟 css 的背景属性 <a class="header-anchor" href="#在-canvas-中模拟-css-的背景属性" aria-label="Permalink to &quot;在 canvas 中模拟 css 的背景属性&quot;">​</a></h2><p>引入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawBackgroundImageToCanvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils/simulateCSSBackgroundInCanvas&#39;</span></span></code></pre></div><p>使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/1.jpg&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;canvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawBackgroundImageToCanvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  img,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    backgroundRepeat: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;repeat-y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    backgroundSize: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;60%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    backgroundPosition: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;center center&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="lru-缓存类" tabindex="-1">LRU 缓存类 <a class="header-anchor" href="#lru-缓存类" aria-label="Permalink to &quot;LRU 缓存类&quot;">​</a></h2><blockquote><p>v0.5.10+</p></blockquote><p>引入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lru </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils/Lru.js&#39;</span></span></code></pre></div><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lru </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max)</span></span></code></pre></div><p><code>max</code>：指定最大缓存数量。</p><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><h4 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size&quot;">​</a></h4><p>当前缓存的数量。</p><h4 id="pool" tabindex="-1">pool <a class="header-anchor" href="#pool" aria-label="Permalink to &quot;pool&quot;">​</a></h4><p>获取缓存池。</p><h3 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h3><h4 id="add-key-value" tabindex="-1">add(key, value) <a class="header-anchor" href="#add-key-value" aria-label="Permalink to &quot;add(key, value)&quot;">​</a></h4><p>添加缓存。</p><h4 id="delete-key" tabindex="-1">delete(key) <a class="header-anchor" href="#delete-key" aria-label="Permalink to &quot;delete(key)&quot;">​</a></h4><p>删除指定缓存。</p><h4 id="has-key" tabindex="-1">has(key) <a class="header-anchor" href="#has-key" aria-label="Permalink to &quot;has(key)&quot;">​</a></h4><p>检查某个缓存是否存在。</p><h4 id="get-key" tabindex="-1">get(key) <a class="header-anchor" href="#get-key" aria-label="Permalink to &quot;get(key)&quot;">​</a></h4><p>获取某个缓存的值。</p><h4 id="clear" tabindex="-1">clear() <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear()&quot;">​</a></h4><blockquote><p>v0.9.2+</p></blockquote><p>清空缓存池。</p>`,247),n=[l];function o(h,p,d,r,c,k){return e(),s("div",{"data-pagefind-body":!0},n)}const b=a(t,[["render",o]]);export{g as __pageData,b as default};
