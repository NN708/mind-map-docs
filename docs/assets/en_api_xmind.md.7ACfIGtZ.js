import{_ as e,o as a,c as t,a5 as i}from"./chunks/framework.D1Ej91Qw.js";const f=JSON.parse('{"title":"XMind parse","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/xmind.md","filePath":"en/api/xmind.md"}'),n={name:"en/api/xmind.md"},o=i('<h1 id="xmind-parse" tabindex="-1">XMind parse <a class="header-anchor" href="#xmind-parse" aria-label="Permalink to &quot;XMind parse&quot;">​</a></h1><blockquote><p>v0.2.7+</p></blockquote><p>Provides methods for importing and export <code>XMind</code> files.</p><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;Import&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xmind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/parse/xmind.js&#39;</span></span></code></pre></div><p>If you are using the file in the format of <code>umd</code>, you can obtain it in the following way:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple-mind-map/dist/simpleMindMap.umd.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simpleMindMap.xmind</span></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="xmind-parsexmindfile-file-handlemulticanvas" tabindex="-1">xmind.parseXmindFile(file, handleMultiCanvas) <a class="header-anchor" href="#xmind-parsexmindfile-file-handlemulticanvas" aria-label="Permalink to &quot;xmind.parseXmindFile(file, handleMultiCanvas)&quot;">​</a></h3><p>Parsing the <code>.xmind</code> file and returning the parsed data. You can use <code>mindMap.setData(data)</code> to render the returned data to the canvas.</p><p><code>file</code>: <code>File</code> object</p><p><code>handleMultiCanvas</code>：v0.10.0+，Optional, a function can be passed. If there are multiple canvases in the imported xmind file, this function will be called. The function takes the xmind canvas list data as a parameter and needs to return the data of one of the canvases, For example, if the received parameter is &#39;content&#39;, if you want to import data from the second canvas, you will return &#39;content[1]&#39;. A function can be an asynchronous function that returns a Promise instance.</p><h3 id="xmind-transformxmind-content" tabindex="-1">xmind.transformXmind(content) <a class="header-anchor" href="#xmind-transformxmind-content" aria-label="Permalink to &quot;xmind.transformXmind(content)&quot;">​</a></h3><blockquote><p>V0.6.6+version changes the method to asynchronous and returns a Promise instance</p></blockquote><p>Convert <code>xmind</code> data. The <code>.xmind</code> file is essentially a <code>zip</code> file that can be decompressed by changing the suffix to zip. Inside, there is a <code>content.json</code> file. If you have parsed this file yourself, you can pass the contents of this file to this method for conversion. You can use <code>mindMap.setData(data)</code> to render the returned data to the canvas.</p><p><code>content</code>: the contents of the <code>content.json</code> file within the <code>.xmind</code> zip package</p><h3 id="xmind-transformoldxmind-content" tabindex="-1">xmind.transformOldXmind(content) <a class="header-anchor" href="#xmind-transformoldxmind-content" aria-label="Permalink to &quot;xmind.transformOldXmind(content)&quot;">​</a></h3><blockquote><p>v0.2.8+</p></blockquote><p>For data parsing of the <code>xmind8</code> version, because the <code>.xmind</code> file in this version does not have a <code>content.json</code>, it corresponds to <code>content.xml</code>.</p><p><code>content</code>: the contents of the <code>content.xml</code> file within the <code>.xmind</code> zip package</p><h3 id="transformtoxmind-data-name" tabindex="-1">transformToXmind(data, name) <a class="header-anchor" href="#transformtoxmind-data-name" aria-label="Permalink to &quot;transformToXmind(data, name)&quot;">​</a></h3><blockquote><p>v0.6.6+</p></blockquote><ul><li><p><code>data</code>: <code>simple-mind-map</code> data, you can get it by <code>mindMap.getData()</code> method.</p></li><li><p><code>name</code>: The file name to export.</p></li></ul><p>Convert the <code>simple mind map</code> data to an <code>xmind</code> file. This method is asynchronous and returns an instance of <code>Promise</code>. The returned data is a <code>blob</code> type <code>zip</code> compressed package data, which you can download as a file yourself.</p>',25),s=[o];function d(c,r,l,h,p,m){return a(),t("div",{"data-pagefind-body":!0},s)}const k=e(n,[["render",d]]);export{f as __pageData,k as default};
