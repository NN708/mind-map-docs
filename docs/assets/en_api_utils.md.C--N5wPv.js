import{_ as e,c as a,o as t,a4 as i}from"./chunks/framework.B358x4hV.js";const g=JSON.parse('{"title":"Utility Methods","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/utils.md","filePath":"en/api/utils.md"}'),s={name:"en/api/utils.md"},l=i(`<h1 id="utility-methods" tabindex="-1">Utility Methods <a class="header-anchor" href="#utility-methods" aria-label="Permalink to &quot;Utility Methods&quot;">​</a></h1><h2 id="base-utility-methods" tabindex="-1">Base utility Methods <a class="header-anchor" href="#base-utility-methods" aria-label="Permalink to &quot;Base utility Methods&quot;">​</a></h2><p>Reference:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {walk, ...} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils&#39;</span></span></code></pre></div><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="resizeimgsizebyoriginratio-width-height-newwidth-newheight" tabindex="-1">resizeImgSizeByOriginRatio(width, height, newWidth, newHeight) <a class="header-anchor" href="#resizeimgsizebyoriginratio-width-height-newwidth-newheight" aria-label="Permalink to &quot;resizeImgSizeByOriginRatio(width, height, newWidth, newHeight)&quot;">​</a></h4><blockquote><p>v0.6.5+</p></blockquote><p><code>width</code>: The original width of the image</p><p><code>height</code>：The original height of the image</p><p><code>newWidth</code>：Width to zoom in to</p><p><code>newHeight</code>：Height to zoom in to</p><p>Scale the image proportionally. Zoom to the specified size of <code>newWidth</code> and <code>newHeight</code> while maintaining the original aspect ratio of the image.</p><h4 id="walk-root-parent-beforecallback-aftercallback-isroot-layerindex-0-index-0-ancestors" tabindex="-1">walk(root, parent, beforeCallback, afterCallback, isRoot, layerIndex = 0, index = 0, ancestors = []) <a class="header-anchor" href="#walk-root-parent-beforecallback-aftercallback-isroot-layerindex-0-index-0-ancestors" aria-label="Permalink to &quot;walk(root, parent, beforeCallback, afterCallback, isRoot, layerIndex = 0, index = 0, ancestors = [])&quot;">​</a></h4><p>Depth-first traversal of a tree</p><p><code>root</code>: the root node of the tree to be traversed</p><p><code>parent</code>: parent node</p><p><code>beforeCallback</code>: preorder traversal callback function, callback parameters are: root, parent, isRoot, layerIndex, index, ancestors</p><p><code>afterCallback</code>: postorder traversal callback function, callback parameters are: root, parent, isRoot, layerIndex, index, ancestors</p><p><code>isRoot</code>: whether it is the root node</p><p><code>layerIndex</code>: node level</p><p><code>index</code>: index of the node among its siblings</p><p><code>ancestors</code>：v0.10.6+, List of all ancestor nodes of the current node</p><p>Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="bfswalk-root-callback" tabindex="-1">bfsWalk(root, callback) <a class="header-anchor" href="#bfswalk-root-callback" aria-label="Permalink to &quot;bfsWalk(root, callback)&quot;">​</a></h4><p>Breadth-first traversal of a tree</p><h4 id="resizeimgsize-width-height-maxwidth-maxheight" tabindex="-1">resizeImgSize(width, height, maxWidth, maxHeight) <a class="header-anchor" href="#resizeimgsize-width-height-maxwidth-maxheight" aria-label="Permalink to &quot;resizeImgSize(width, height, maxWidth, maxHeight)&quot;">​</a></h4><p>Resize image size</p><p><code>width</code>: original width of the image</p><p><code>height</code>: original height of the image</p><p><code>maxWidth</code>: the width to resize to</p><p><code>maxHeight</code>: the height to resize to</p><p><code>maxWidth</code> and <code>maxHeight</code> can both be passed, or only one of them can be passed</p><h4 id="resizeimg-imgurl-maxwidth-maxheight" tabindex="-1">resizeImg(imgUrl, maxWidth, maxHeight) <a class="header-anchor" href="#resizeimg-imgurl-maxwidth-maxheight" aria-label="Permalink to &quot;resizeImg(imgUrl, maxWidth, maxHeight)&quot;">​</a></h4><p>Resize image, internally loads the image first, then calls the <code>resizeImgSize</code> method, and returns a <code>promise</code></p><h4 id="simpledeepclone-data" tabindex="-1">simpleDeepClone(data) <a class="header-anchor" href="#simpledeepclone-data" aria-label="Permalink to &quot;simpleDeepClone(data)&quot;">​</a></h4><p>Extremely simple deep copy method, can only be used for objects that are all basic data, otherwise it will throw an error</p><h4 id="copyrendertree-tree-root" tabindex="-1">copyRenderTree(tree, root) <a class="header-anchor" href="#copyrendertree-tree-root" aria-label="Permalink to &quot;copyRenderTree(tree, root)&quot;">​</a></h4><p>Copy render tree data, example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyRenderTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mindMap.renderer.renderTree);</span></span></code></pre></div><h4 id="copynodetree-tree-root-removeactivestate-keepid" tabindex="-1">copyNodeTree(tree, root, removeActiveState, keepId) <a class="header-anchor" href="#copynodetree-tree-root-removeactivestate-keepid" aria-label="Permalink to &quot;copyNodeTree(tree, root, removeActiveState, keepId)&quot;">​</a></h4><ul><li><p><code>removeActiveState</code>: <code>Boolean</code>, default is <code>false</code>, Whether to remove the active state of the node</p></li><li><p><code>removeId</code>：v0.7.3-fix.1+, Is remove the uid from the node data, default is <code>true</code></p></li></ul><blockquote><ul><li><code>keepId</code>: (Original fourth parameter) v0.4.6+, <code>Boolean</code>, default is <code>false</code>, Whether to retain the <code>id</code> of the replicated node will be deleted by default to prevent duplicate node <code>id</code>. However, for mobile node scenarios, the original <code>id</code> of the node needs to be retained</li></ul></blockquote><p>Copy node tree data, mainly eliminating the reference <code>node</code> instance <code>_node</code> and copying the <code>data</code> of the data object, example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyNodeTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, node);</span></span></code></pre></div><h4 id="imgtodataurl-src-returnblob-false" tabindex="-1">imgToDataUrl(src, returnBlob = false) <a class="header-anchor" href="#imgtodataurl-src-returnblob-false" aria-label="Permalink to &quot;imgToDataUrl(src, returnBlob = false)&quot;">​</a></h4><ul><li><p><code>src</code>：Image url</p></li><li><p><code>returnBlob</code>：v0.10.2+，Is the result returned in Blob format, defaulting to DataURL format</p></li></ul><p>Convert image to dataURL</p><h4 id="downloadfile-file-filename" tabindex="-1">downloadFile(file, fileName) <a class="header-anchor" href="#downloadfile-file-filename" aria-label="Permalink to &quot;downloadFile(file, fileName)&quot;">​</a></h4><p>Download file</p><h4 id="throttle-fn-time-300-ctx" tabindex="-1">throttle(fn, time = 300, ctx) <a class="header-anchor" href="#throttle-fn-time-300-ctx" aria-label="Permalink to &quot;throttle(fn, time = 300, ctx)&quot;">​</a></h4><p>Throttle function</p><h4 id="asyncrun-tasklist-callback" tabindex="-1">asyncRun(taskList, callback = () =&gt; {}) <a class="header-anchor" href="#asyncrun-tasklist-callback" aria-label="Permalink to &quot;asyncRun(taskList, callback = () =&gt; {})&quot;">​</a></h4><p>Run tasks in task list asynchronously, tasks are run synchronously without order</p><h4 id="degtorad-deg" tabindex="-1">degToRad(deg) <a class="header-anchor" href="#degtorad-deg" aria-label="Permalink to &quot;degToRad(deg)&quot;">​</a></h4><blockquote><p>v0.2.24+</p></blockquote><p>Angle to radian</p><h4 id="camelcasetohyphen-str" tabindex="-1">camelCaseToHyphen(str) <a class="header-anchor" href="#camelcasetohyphen-str" aria-label="Permalink to &quot;camelCaseToHyphen(str)&quot;">​</a></h4><blockquote><p>v0.2.24+</p></blockquote><p>CamelCase to hyphen</p><h4 id="joinfontstr-italic-bold-fontsize-fontfamily" tabindex="-1">joinFontStr({ italic, bold, fontSize, fontFamily }) <a class="header-anchor" href="#joinfontstr-italic-bold-fontsize-fontfamily" aria-label="Permalink to &quot;joinFontStr({ italic, bold, fontSize, fontFamily })&quot;">​</a></h4><blockquote><p>v0.3.4+</p></blockquote><p>Join the <code>font</code> attribute value of the <code>css</code> font</p><h4 id="measuretext-text-italic-bold-fontsize-fontfamily" tabindex="-1">measureText(text, { italic, bold, fontSize, fontFamily }) <a class="header-anchor" href="#measuretext-text-italic-bold-fontsize-fontfamily" aria-label="Permalink to &quot;measureText(text, { italic, bold, fontSize, fontFamily })&quot;">​</a></h4><blockquote><p>v0.3.4+</p></blockquote><p>Measure the width and height of the text, return value:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ width, height }</span></span></code></pre></div><h4 id="gettextfromhtml-html" tabindex="-1">getTextFromHtml(html) <a class="header-anchor" href="#gettextfromhtml-html" aria-label="Permalink to &quot;getTextFromHtml(html)&quot;">​</a></h4><p>Extract plain text content from an HTML string.</p><h4 id="readblob-blob" tabindex="-1">readBlob(blob) <a class="header-anchor" href="#readblob-blob" aria-label="Permalink to &quot;readBlob(blob)&quot;">​</a></h4><blockquote><p>v0.5.9+</p></blockquote><p>Convert <code>blob</code> data to <code>data:url</code> data.</p><h4 id="parsedataurl-data" tabindex="-1">parseDataUrl(data) <a class="header-anchor" href="#parsedataurl-data" aria-label="Permalink to &quot;parseDataUrl(data)&quot;">​</a></h4><blockquote><p>v0.6.6+</p></blockquote><p>Parse <code>data:url</code> data, return:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file type of data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// base64 data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="getimagesize-src" tabindex="-1">getImageSize(src) <a class="header-anchor" href="#getimagesize-src" aria-label="Permalink to &quot;getImageSize(src)&quot;">​</a></h4><blockquote><p>v0.6.6+</p></blockquote><ul><li><code>src</code>: The url of img</li></ul><p>Get the size of image, return:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="loadimage-imgfile" tabindex="-1">loadImage(imgFile) <a class="header-anchor" href="#loadimage-imgfile" aria-label="Permalink to &quot;loadImage(imgFile)&quot;">​</a></h4><blockquote><p>v0.6.8+</p></blockquote><ul><li><code>imgFile</code>: File object of image type</li></ul><p>Load image, return:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DataUrl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  size</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { width, height } width and height of image</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="gettype-data" tabindex="-1">getType(data) <a class="header-anchor" href="#gettype-data" aria-label="Permalink to &quot;getType(data)&quot;">​</a></h4><blockquote><p>v0.6.9+</p></blockquote><p>Get the type of a data, such as <code>Boolean</code>、<code>Array</code>.</p><h4 id="removehtmlstyle-html" tabindex="-1">removeHtmlStyle(html) <a class="header-anchor" href="#removehtmlstyle-html" aria-label="Permalink to &quot;removeHtmlStyle(html)&quot;">​</a></h4><blockquote><p>v0.6.10+</p></blockquote><p>Remove the inline style of nodes in the HTML string.</p><h4 id="addhtmlstyle-html-tag-style" tabindex="-1">addHtmlStyle(html, tag, style) <a class="header-anchor" href="#addhtmlstyle-html-tag-style" aria-label="Permalink to &quot;addHtmlStyle(html, tag, style)&quot;">​</a></h4><blockquote><p>v0.6.10+</p></blockquote><p>Add inline styles to the specified tags in the HTML tag.</p><h4 id="checkisrichtext-str" tabindex="-1">checkIsRichText(str) <a class="header-anchor" href="#checkisrichtext-str" aria-label="Permalink to &quot;checkIsRichText(str)&quot;">​</a></h4><blockquote><p>v0.6.10+</p></blockquote><p>Check if a string is a rich text character.</p><h4 id="iswhite-color" tabindex="-1">isWhite(color) <a class="header-anchor" href="#iswhite-color" aria-label="Permalink to &quot;isWhite(color)&quot;">​</a></h4><blockquote><p>v0.6.11+</p></blockquote><p>Determine whether a color is white.</p><h4 id="istransparent-color" tabindex="-1">isTransparent(color) <a class="header-anchor" href="#istransparent-color" aria-label="Permalink to &quot;isTransparent(color)&quot;">​</a></h4><blockquote><p>v0.6.11+</p></blockquote><p>Determine whether a color is transparent.</p><h4 id="noderichtexttotextwithwrap-html" tabindex="-1">nodeRichTextToTextWithWrap(html) <a class="header-anchor" href="#noderichtexttotextwithwrap-html" aria-label="Permalink to &quot;nodeRichTextToTextWithWrap(html)&quot;">​</a></h4><blockquote><p>v0.6.12+</p></blockquote><p>Convert the rich text content of nodes in the form of <code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;</code> into text wrapped in <code>\\n</code>.</p><h4 id="texttonoderichtextwithwrap-html" tabindex="-1">textToNodeRichTextWithWrap(html) <a class="header-anchor" href="#texttonoderichtextwithwrap-html" aria-label="Permalink to &quot;textToNodeRichTextWithWrap(html)&quot;">​</a></h4><blockquote><p>v0.6.12+</p></blockquote><p>Convert the wrapped text of <code>&lt;br&gt;</code> into node rich text content in the form of <code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;</code>.</p><h4 id="ismobile" tabindex="-1">isMobile() <a class="header-anchor" href="#ismobile" aria-label="Permalink to &quot;isMobile()&quot;">​</a></h4><blockquote><p>v0.6.13+</p></blockquote><p>Determine if it is a mobile environment.</p><h4 id="gettopancestorsfomnodelist-list" tabindex="-1">getTopAncestorsFomNodeList(list) <a class="header-anchor" href="#gettopancestorsfomnodelist-list" aria-label="Permalink to &quot;getTopAncestorsFomNodeList(list)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>list</code>: Arrray, Node instance list.</li></ul><p>Find the top-level node list from the node instance list.</p><h4 id="checktworectisoverlap-minx1-maxx1-miny1-maxy1-minx2-maxx2-miny2-maxy2" tabindex="-1">checkTwoRectIsOverlap(minx1, maxx1, miny1, maxy1, minx2, maxx2, miny2, maxy2) <a class="header-anchor" href="#checktworectisoverlap-minx1-maxx1-miny1-maxy1-minx2-maxx2-miny2-maxy2" aria-label="Permalink to &quot;checkTwoRectIsOverlap(minx1, maxx1, miny1, maxy1, minx2, maxx2, miny2, maxy2)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><p>The parameter is the position of two rectangles.</p><p>Determine if two rectangles overlap.</p><h4 id="focusinput-el" tabindex="-1">focusInput(el) <a class="header-anchor" href="#focusinput-el" aria-label="Permalink to &quot;focusInput(el)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>el</code>: DOM nodes, elements that can be focused, typically input box elements.</li></ul><p>Focus on the specified input box.</p><h4 id="selectallinput-el" tabindex="-1">selectAllInput(el) <a class="header-anchor" href="#selectallinput-el" aria-label="Permalink to &quot;selectAllInput(el)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>el</code>: DOM nodes, elements that can be focused, typically input box elements.</li></ul><p>Focus and select all specified input boxes.</p><h4 id="adddatatoappointnodes-appointnodes-data" tabindex="-1">addDataToAppointNodes(appointNodes, data = {}) <a class="header-anchor" href="#adddatatoappointnodes-appointnodes-data" aria-label="Permalink to &quot;addDataToAppointNodes(appointNodes, data = {})&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><p><code>appointNodes</code>：Node instance list, array type.</p></li><li><p><code>data</code>：The data to be attached to all nodes in the specified node instance list tree.</p></li></ul><p>Adding additional data to the specified node list tree data will modify the original data.</p><h4 id="createuidforappointnodes-appointnodes-createnewid-handle" tabindex="-1">createUidForAppointNodes(appointNodes, createNewId, handle) <a class="header-anchor" href="#createuidforappointnodes-appointnodes-createnewid-handle" aria-label="Permalink to &quot;createUidForAppointNodes(appointNodes, createNewId, handle)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><p><code>appointNodes</code>：Node instance list, array type.</p></li><li><p><code>createNewId</code>：v0.7.3-fix.1+, <code>Boolean</code>, default is <code>false</code>, If the node does not have a &#39;uid&#39;, a new &#39;uid&#39; will be created. If &#39;true&#39; is passed, a new &#39;uid&#39; will be created regardless of whether the node data originally exists or not\`</p></li><li><p><code>handle</code>：v0.10.5+, <code>null、Function</code>, default is <code>null</code>, You can pass a function that will be called when traversing each node, with the callback parameter being the current node being traversed.</p></li></ul><p>Adding a uid to the specified node list tree data (if the uid does not exist) will modify the original data.</p><h4 id="getnodeindex-node" tabindex="-1">getNodeIndex(node) <a class="header-anchor" href="#getnodeindex-node" aria-label="Permalink to &quot;getNodeIndex(node)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>node</code>：Node instance.</li></ul><p>Gets the position index of a node within its peers.</p><h4 id="mergericonlist-list" tabindex="-1">mergerIconList(list) <a class="header-anchor" href="#mergericonlist-list" aria-label="Permalink to &quot;mergerIconList(list)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>list</code>：The array of node icons to be merged into the library.</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const data = [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;1&#39;, icon: &#39;a&#39; }, { name: 2, icon: &#39;b&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;2&#39;, icon: &#39;c&#39; }, { name: 3, icon: &#39;d&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mergerIconList(data)  result:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   { type: &#39;priority&#39;, name: &#39;优先级图标&#39;, list: [{ name: &#39;1&#39;, icon: &#39;a&#39; }, { name: 2, icon: &#39;c&#39; }, { name: 3, icon: &#39;d&#39; }] },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ]</span></span></code></pre></div><p>Merge icon arrays.</p><h4 id="htmlescape-str" tabindex="-1">htmlEscape(str) <a class="header-anchor" href="#htmlescape-str" aria-label="Permalink to &quot;htmlEscape(str)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>str</code>：String.</li></ul><p>Escape the incoming string, currently escaping the following three characters:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&amp; -&gt; &amp;amp;</span></span>
<span class="line"><span>&lt; -&gt; &amp;lt;</span></span>
<span class="line"><span>&gt; -&gt; &amp;gt;</span></span></code></pre></div><h4 id="generatecolorbycontent-str" tabindex="-1">generateColorByContent(str) <a class="header-anchor" href="#generatecolorbycontent-str" aria-label="Permalink to &quot;generateColorByContent(str)&quot;">​</a></h4><blockquote><p>v0.7.2+</p></blockquote><ul><li><code>str</code>：String.</li></ul><p>Generate colors based on incoming content, and the same content will generate the same color.</p><h4 id="issameobject-a-b" tabindex="-1">isSameObject(a, b) <a class="header-anchor" href="#issameobject-a-b" aria-label="Permalink to &quot;isSameObject(a, b)&quot;">​</a></h4><blockquote><p>v0.7.3+</p></blockquote><ul><li><code>a</code>、<code>b</code>: Object | Array, Two objects to compare</li></ul><p>Determine whether two objects are the same, only handling objects or arrays.</p><h4 id="getnodedataindex-node" tabindex="-1">getNodeDataIndex(node) <a class="header-anchor" href="#getnodedataindex-node" aria-label="Permalink to &quot;getNodeDataIndex(node)&quot;">​</a></h4><blockquote><p>v0.8.0+</p></blockquote><p>Gets the position index of a node within its sibling nodes.</p><h4 id="getnodeindexinnodelist-node-nodelist" tabindex="-1">getNodeIndexInNodeList(node, nodeList) <a class="header-anchor" href="#getnodeindexinnodelist-node-nodelist" aria-label="Permalink to &quot;getNodeIndexInNodeList(node, nodeList)&quot;">​</a></h4><blockquote><p>v0.8.0+</p></blockquote><p>Find the index of a node from a list of nodes.</p><h4 id="setdatatoclipboard-data" tabindex="-1">setDataToClipboard(data) <a class="header-anchor" href="#setdatatoclipboard-data" aria-label="Permalink to &quot;setDataToClipboard(data)&quot;">​</a></h4><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>data</code>：Object | Array</li></ul><p>Set data to the user clipboard.</p><h4 id="getdatafromclipboard" tabindex="-1">getDataFromClipboard() <a class="header-anchor" href="#getdatafromclipboard" aria-label="Permalink to &quot;getDataFromClipboard()&quot;">​</a></h4><blockquote><p>v0.8.0+</p></blockquote><p>Reading text and images from the user&#39;s clipboard returns:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  text,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  img</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="removefromparentnodedata-node" tabindex="-1">removeFromParentNodeData(node) <a class="header-anchor" href="#removefromparentnodedata-node" aria-label="Permalink to &quot;removeFromParentNodeData(node)&quot;">​</a></h4><blockquote><p>v0.8.0+</p></blockquote><p>Remove the data of a node from its parent node&#39;s <code>nodeData.children</code> list.</p><h4 id="checkhassupsubrelation" tabindex="-1">checkHasSupSubRelation() <a class="header-anchor" href="#checkhassupsubrelation" aria-label="Permalink to &quot;checkHasSupSubRelation()&quot;">​</a></h4><blockquote><p>v0.8.1+</p></blockquote><p>Determine whether there is a hierarchical relationship from the given node instance list.</p><h4 id="handleselfclosetags-str" tabindex="-1">handleSelfCloseTags(str) <a class="header-anchor" href="#handleselfclosetags-str" aria-label="Permalink to &quot;handleSelfCloseTags(str)&quot;">​</a></h4><blockquote><p>v0.9.1+</p></blockquote><ul><li><code>str</code>: html string</li></ul><p>Add a closed state to HTML self closing tags, <code>&lt;div&gt;&lt;img src=&quot;xxx&quot;&gt;&lt;/div&gt;</code> -&gt; <code>&lt;div&gt;&lt;img src=&quot;xxx&quot; /&gt;&lt;/div&gt;</code>。</p><h4 id="checknodelistisequal-list1-list2" tabindex="-1">checkNodeListIsEqual(list1, list2) <a class="header-anchor" href="#checknodelistisequal-list1-list2" aria-label="Permalink to &quot;checkNodeListIsEqual(list1, list2)&quot;">​</a></h4><blockquote><p>v0.9.1+</p></blockquote><ul><li><code>list1/list2</code>: Node instance list</li></ul><p>Check if the two node instance lists contain the same nodes.</p><h4 id="getchromeversion" tabindex="-1">getChromeVersion() <a class="header-anchor" href="#getchromeversion" aria-label="Permalink to &quot;getChromeVersion()&quot;">​</a></h4><blockquote><p>v0.9.3+</p></blockquote><p>Get the current version of the Chrome kernel used by the browser. If the current browser is not using the &#39;Chrome&#39; kernel, an empty string will be returned.</p><h4 id="transformtreedatatoobject-data" tabindex="-1">transformTreeDataToObject(data) <a class="header-anchor" href="#transformtreedatatoobject-data" aria-label="Permalink to &quot;transformTreeDataToObject(data)&quot;">​</a></h4><blockquote><p>v0.9.3+</p></blockquote><ul><li><code>data</code>：Mind map node data.</li></ul><p>Convert the mind map tree structure to a level object.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    uid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                children: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>Convert to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [uid1, uid2],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h4 id="transformobjecttotreedata-data" tabindex="-1">transformObjectToTreeData(data) <a class="header-anchor" href="#transformobjecttotreedata-data" aria-label="Permalink to &quot;transformObjectToTreeData(data)&quot;">​</a></h4><blockquote><p>v0.9.3+</p></blockquote><p>Convert flat objects into a tree structure. Reverse operation of the transformTreeDataToObject method.</p><h4 id="removehtmlnodebyclass-html-selector" tabindex="-1">removeHtmlNodeByClass(html, selector) <a class="header-anchor" href="#removehtmlnodebyclass-html-selector" aria-label="Permalink to &quot;removeHtmlNodeByClass(html, selector)&quot;">​</a></h4><blockquote><p>v0.9.6+</p></blockquote><ul><li><p><code>html</code>：html string</p></li><li><p><code>selector</code>：Node selectors, such as class selectors and id selectors</p></li></ul><p>Remove the node of the specified selector from the specified HTML string, and then return the processed HTML string.</p><h4 id="getonfullscreenevt" tabindex="-1">getOnfullscreEnevt() <a class="header-anchor" href="#getonfullscreenevt" aria-label="Permalink to &quot;getOnfullscreEnevt()&quot;">​</a></h4><blockquote><p>v0.9.11+</p></blockquote><p>Detect full screen events available in the current browser. You can use it this way:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fullscrrenEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOnfullscreEnevt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Monitor full screen events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullscrrenEvent, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Determine whether the current state is full screen based on whether document.fullscreenElement is null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="fullscreen-element" tabindex="-1">fullScreen(element) <a class="header-anchor" href="#fullscreen-element" aria-label="Permalink to &quot;fullScreen(element)&quot;">​</a></h4><blockquote><p>v0.9.11+</p></blockquote><p>Put the specified DOM element into full screen mode.</p><h4 id="exitfullscreen" tabindex="-1">exitFullScreen() <a class="header-anchor" href="#exitfullscreen" aria-label="Permalink to &quot;exitFullScreen()&quot;">​</a></h4><blockquote><p>v0.9.11+</p></blockquote><p>Exit full screen mode.</p><h4 id="defensexss-htmlstr" tabindex="-1">defenseXSS(htmlStr) <a class="header-anchor" href="#defensexss-htmlstr" aria-label="Permalink to &quot;defenseXSS(htmlStr)&quot;">​</a></h4><blockquote><p>v0.10.0+</p></blockquote><ul><li><code>htmlStr</code>：HTML strings that need to be filtered</li></ul><p>Return：Filtered HTML string</p><p>Defend against XSS attacks, filter malicious HTML tags and attributes. You can recursively traverse the tree data before passing the node data to SimpleMindMap, using this method to process the rich text content of nodes and avoid XSS attacks.</p><h2 id="simulate-css-background-in-canvas" tabindex="-1">Simulate CSS background in Canvas <a class="header-anchor" href="#simulate-css-background-in-canvas" aria-label="Permalink to &quot;Simulate CSS background in Canvas&quot;">​</a></h2><p>Import:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawBackgroundImageToCanvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils/simulateCSSBackgroundInCanvas&#39;</span></span></code></pre></div><p>Usage：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/1.jpg&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;canvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawBackgroundImageToCanvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, width, height, img, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backgroundRepeat: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;repeat-y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backgroundSize: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;60%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backgroundPosition: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;center center&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // fail</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="lru-cache-class" tabindex="-1">LRU cache class <a class="header-anchor" href="#lru-cache-class" aria-label="Permalink to &quot;LRU cache class&quot;">​</a></h2><blockquote><p>v0.5.10+</p></blockquote><p>Import:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lru </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/utils/Lru.js&#39;</span></span></code></pre></div><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lru </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max)</span></span></code></pre></div><p><code>max</code>: Specify the maximum number of caches.</p><h3 id="instance-properties" tabindex="-1">Instance properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance properties&quot;">​</a></h3><h4 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size&quot;">​</a></h4><p>The current number of caches.</p><h4 id="pool" tabindex="-1">pool <a class="header-anchor" href="#pool" aria-label="Permalink to &quot;pool&quot;">​</a></h4><p>Get cache pool.</p><h3 id="instance-methods" tabindex="-1">Instance methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance methods&quot;">​</a></h3><h4 id="add-key-value" tabindex="-1">add(key, value) <a class="header-anchor" href="#add-key-value" aria-label="Permalink to &quot;add(key, value)&quot;">​</a></h4><p>Add cache.</p><h4 id="delete-key" tabindex="-1">delete(key) <a class="header-anchor" href="#delete-key" aria-label="Permalink to &quot;delete(key)&quot;">​</a></h4><p>Delete cache.</p><h4 id="has-key" tabindex="-1">has(key) <a class="header-anchor" href="#has-key" aria-label="Permalink to &quot;has(key)&quot;">​</a></h4><p>Check if a cache exists.</p><h4 id="get-key" tabindex="-1">get(key) <a class="header-anchor" href="#get-key" aria-label="Permalink to &quot;get(key)&quot;">​</a></h4><p>Gets the value of a cache.</p><blockquote><p>v0.9.2+</p></blockquote><p>Empty the cache pool.</p>`,247),n=[l];function o(h,r,d,p,c,k){return t(),a("div",null,n)}const m=e(s,[["render",o]]);export{g as __pageData,m as default};
