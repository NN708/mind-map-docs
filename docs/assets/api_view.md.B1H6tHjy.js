import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.B358x4hV.js";const b=JSON.parse('{"title":"View实例","description":"","frontmatter":{},"headers":[],"relativePath":"api/view.md","filePath":"api/view.md"}'),c={name:"api/view.md"},r=o('<h1 id="view实例" tabindex="-1">View实例 <a class="header-anchor" href="#view实例" aria-label="Permalink to &quot;View实例&quot;">​</a></h1><p><code>view</code>实例负责视图操作，可通过<code>mindMap.view</code>获取到该实例</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="fit" tabindex="-1">fit() <a class="header-anchor" href="#fit" aria-label="Permalink to &quot;fit()&quot;">​</a></h3><blockquote><p>v0.6.0+</p></blockquote><p>缩放思维导图至适应画布。</p><p>注意该方法不能在<code>setData</code>、<code>setFullData</code>方法调用后立即调用，需要监听<code>node_tree_render_end</code>事件调用<code>fit</code>。</p><h3 id="translatex-step" tabindex="-1">translateX(step) <a class="header-anchor" href="#translatex-step" aria-label="Permalink to &quot;translateX(step)&quot;">​</a></h3><p><code>x</code>方向进行平移，<code>step</code>：要平移的像素</p><h3 id="translatey-step" tabindex="-1">translateY(step) <a class="header-anchor" href="#translatey-step" aria-label="Permalink to &quot;translateY(step)&quot;">​</a></h3><p><code>y</code>方向进行平移，<code>step</code>：要平移的像素</p><h3 id="translatexto-x" tabindex="-1">translateXTo(x) <a class="header-anchor" href="#translatexto-x" aria-label="Permalink to &quot;translateXTo(x)&quot;">​</a></h3><blockquote><p>v0.2.11+</p></blockquote><p>平移<code>x</code>方向到指定位置</p><h3 id="translateyto-y" tabindex="-1">translateYTo(y) <a class="header-anchor" href="#translateyto-y" aria-label="Permalink to &quot;translateYTo(y)&quot;">​</a></h3><blockquote><p>v0.2.11+</p></blockquote><p>平移<code>y</code>方向到指定位置</p><h3 id="reset" tabindex="-1">reset() <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;reset()&quot;">​</a></h3><p>恢复到默认的变换</p><h3 id="narrow-cx-cy" tabindex="-1">narrow(cx, cy) <a class="header-anchor" href="#narrow-cx-cy" aria-label="Permalink to &quot;narrow(cx, cy)&quot;">​</a></h3><ul><li><p><code>cx</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li><li><p><code>cy</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li></ul><p>缩小</p><h3 id="enlarge-cx-cy" tabindex="-1">enlarge(cx, cy) <a class="header-anchor" href="#enlarge-cx-cy" aria-label="Permalink to &quot;enlarge(cx, cy)&quot;">​</a></h3><ul><li><p><code>cx</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li><li><p><code>cy</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li></ul><p>放大</p><h3 id="gettransformdata" tabindex="-1">getTransformData() <a class="header-anchor" href="#gettransformdata" aria-label="Permalink to &quot;getTransformData()&quot;">​</a></h3><blockquote><p>v0.1.1+</p></blockquote><p>获取当前变换数据，可用于回显</p><h3 id="settransformdata-data" tabindex="-1">setTransformData(data) <a class="header-anchor" href="#settransformdata-data" aria-label="Permalink to &quot;setTransformData(data)&quot;">​</a></h3><blockquote><p>v0.1.1+</p></blockquote><p>动态设置变换数据，可以通过getTransformData方法获取变换数据</p><h3 id="setscale-scale-cx-cy" tabindex="-1">setScale(scale, cx, cy) <a class="header-anchor" href="#setscale-scale-cx-cy" aria-label="Permalink to &quot;setScale(scale, cx, cy)&quot;">​</a></h3><blockquote><p>v0.2.17+</p></blockquote><ul><li><p><code>scale</code>: 缩放数值，未缩放为<code>1</code>，小于为<code>1</code>缩小，大于<code>1</code>为放大</p></li><li><p><code>cx</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li><li><p><code>cy</code>：（v0.6.4+）以画布指定位置进行缩放，默认为画布中心点</p></li></ul><p>设置缩放</p>',35),l=[r];function d(s,i,n,p,h,u){return t(),a("div",null,l)}const q=e(c,[["render",d]]);export{b as __pageData,q as default};
