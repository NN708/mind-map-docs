import{_ as a,o as i,c as t,a5 as e}from"./chunks/framework.D1Ej91Qw.js";const _=JSON.parse('{"title":"Painter 插件","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/painter.md","filePath":"plugins/painter.md"}'),s={name:"plugins/painter.md"},n=e(`<h1 id="painter-插件" tabindex="-1">Painter 插件 <a class="header-anchor" href="#painter-插件" aria-label="Permalink to &quot;Painter 插件&quot;">​</a></h1><blockquote><p>v0.6.12+</p></blockquote><p>节点格式刷插件。</p><h2 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MindMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/plugins/Painter.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Painter)</span></span></code></pre></div><p>注册完且实例化<code>MindMap</code>后可通过<code>mindMap.painter</code>获取到该实例。</p><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><blockquote><p>可以通过mindMap.on(&#39;事件名称&#39;, () =&gt; {})来监听事件。</p></blockquote><h3 id="painter-start" tabindex="-1">painter_start <a class="header-anchor" href="#painter-start" aria-label="Permalink to &quot;painter_start&quot;">​</a></h3><p>开始格式刷事件。</p><h3 id="painter-end" tabindex="-1">painter_end <a class="header-anchor" href="#painter-end" aria-label="Permalink to &quot;painter_end&quot;">​</a></h3><p>结束格式刷事件。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="startpainter" tabindex="-1">startPainter() <a class="header-anchor" href="#startpainter" aria-label="Permalink to &quot;startPainter()&quot;">​</a></h3><p>开始格式刷。</p><p>当调用了该方法后，如果当前存在激活节点，那么会默认取第一个激活的节点为指定节点，点击其他节点后，会把该节点的样式应用到被点击的其他节点，当点击画布后本次格式刷操作结束。</p>`,16),r=[n];function p(l,h,o,d,c,k){return i(),t("div",{"data-pagefind-body":!0},r)}const m=a(s,[["render",p]]);export{_ as __pageData,m as default};
