import{_ as s,c as e,o as i,a4 as a}from"./chunks/framework.B358x4hV.js";const E=JSON.parse('{"title":"RichText plugin","description":"","frontmatter":{},"headers":[],"relativePath":"en/plugins/richText.md","filePath":"en/plugins/richText.md"}'),t={name:"en/plugins/richText.md"},n=a(`<h1 id="richtext-plugin" tabindex="-1">RichText plugin <a class="header-anchor" href="#richtext-plugin" aria-label="Permalink to &quot;RichText plugin&quot;">​</a></h1><blockquote><p>v0.4.0+</p></blockquote><p>This plugin provides the ability to edit rich text of nodes, and takes effect after registration.</p><p>By default, node editing can only uniformly apply styles to all text in the node. This plugin can support rich text editing effects. Currently, it supports bold, italic, underline, strikethrough, font, font size, color, and backgroundColor. Underline and line height are not supported.</p><p>The principle of this plugin is to use <a href="https://github.com/quilljs/quill" target="_blank" rel="noreferrer">Quill</a> editor implements rich text editing, and then uses the edited <code>DOM</code> node directly as the text data of the node, and embeds the <code>DOM</code> node through the <code>svg</code> <code>foreignObject</code> tag during rendering.</p><blockquote><p>The following prompts exist in versions prior to v0.5.6:</p><p>This also caused a problem, that is, the function of exporting as a picture was affected, The original principle of exporting <code>svg</code> as an image is very simple, Get the <code>svg</code> string, and then create the <code>blob</code> data of the <code>type=image/svg+xml</code> type. Then use the <code>URL.createObjectURL</code> method to generate the <code>data:url</code> data. Then create a <code>Image</code> tag, use the <code>data:url</code> as the <code>src</code> of the image, and finally draw the image on the <code>canvas</code> object for export, However, after testing, when the <code>DOM</code> node is embedded in the <code>svg</code>, this method of export will cause errors, and after trying many ways, the perfect export effect cannot be achieved, The current method is to traverse the <code>foreignObject</code> node in <code>svg</code>, using <a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noreferrer">html2canvas</a> Convert the <code>DOM</code> node in the <code>foreignObject</code> node into an image and then replace the <code>foreignObject</code> node. This method can work, but it is very time-consuming. Because the <code>html2canvas</code> conversion takes a long time, it takes about 2 seconds to convert a node. This leads to the more nodes, the slower the conversion time. Therefore, it is recommended not to use this plugin if you cannot tolerate the long time of export.</p></blockquote><blockquote><p>The version of <code>v0.5.7+</code> directly uses <code>html2canvas</code> to convert the entire <code>svg</code>, which is no longer an issue with speed. However, there is currently a bug where the color of the node does not take effect after export.</p></blockquote><p><code>V0.6.13+</code> version uses <a href="https://github.com/1904labs/dom-to-image-more" target="_blank" rel="noreferrer">dom-to-image-more</a> Replaced &#39;html2canvas&#39; to address the issue of ineffective color export for nodes.</p><blockquote><p>The compatibility of dom to image more is relatively poor, and exported images are empty on many browsers, so you can replace them with html2canvas according to your own needs.</p></blockquote><p>After version <code>0.6.16+</code>, third-party libraries such as &#39;dom-to-image-more&#39; and &#39;html2canvas&#39; will no longer be used for export, Compatibility and export are no longer issues.</p><p>Please refer to the <a href="./../api/constructor/constructor-options.html#_7-richtext-plugin">Instantiation Options</a> for configuration.</p><h2 id="register" tabindex="-1">Register <a class="header-anchor" href="#register" aria-label="Permalink to &quot;Register&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MindMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RichText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/plugins/RichText.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import RichText from &#39;simple-mind-map/src/RichText.js&#39; Use this path for versions below v0.6.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RichText, opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>After registration and instantiation of <code>MindMap</code>, the instance can be obtained through <code>mindMap.richText</code>.</p><h3 id="register-options" tabindex="-1">Register options <a class="header-anchor" href="#register-options" aria-label="Permalink to &quot;Register options&quot;">​</a></h3><p>The <code>opt</code> option can pass the following parameters:</p><ul><li><code>opt.fontFamilyList</code></li></ul><p>Replace the built-in font list during rich text editing. The built-in list is:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;宋体, SimSun, Songti SC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;微软雅黑, Microsoft YaHei&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;楷体, 楷体_GB2312, SimKai, STKaiti&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;黑体, SimHei, Heiti SC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;隶书, SimLi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;andale mono&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;arial, helvetica, sans-serif&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;arial black, avant garde&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;comic sans ms&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;impact, chicago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;times new roman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;sans-serif&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;serif&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li><code>opt.fontSizeList</code></li></ul><p>Replace the built-in font size list during rich text editing. The built-in list is:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="method" tabindex="-1">Method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;Method&quot;">​</a></h2><h3 id="extendfont-list-cover-false" tabindex="-1">extendFont(list = [], cover = false) <a class="header-anchor" href="#extendfont-list-cover-false" aria-label="Permalink to &quot;extendFont(list = [], cover = false)&quot;">​</a></h3><blockquote><p>v0.8.6+</p></blockquote><ul><li><p><code>list</code>：List of font names to be expanded;</p></li><li><p><code>cover</code>：Whether to overwrite the current font list, default is &#39;false&#39;, which means adding after the current font list;</p></li></ul><p>Dynamically expand supported fonts.</p><h3 id="setnotactivenodestyle-node-style" tabindex="-1">setNotActiveNodeStyle(node, style) <a class="header-anchor" href="#setnotactivenodestyle-node-style" aria-label="Permalink to &quot;setNotActiveNodeStyle(node, style)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>style</code>：Object, style object.</li></ul><p>Set rich text style for inactive nodes.</p><h3 id="selectall" tabindex="-1">selectAll() <a class="header-anchor" href="#selectall" aria-label="Permalink to &quot;selectAll()&quot;">​</a></h3><p>Select All. When the node is being edited, you can select all the text in the node through this method.</p><h3 id="focus" tabindex="-1">focus() <a class="header-anchor" href="#focus" aria-label="Permalink to &quot;focus()&quot;">​</a></h3><blockquote><p>v0.4.7+</p></blockquote><p>Focus.</p><h3 id="formattext-config-clear-false-pure-false" tabindex="-1">formatText(config = {}, clear = false, pure = false) <a class="header-anchor" href="#formattext-config-clear-false-pure-false" aria-label="Permalink to &quot;formatText(config = {}, clear = false, pure = false)&quot;">​</a></h3><ul><li><code>config</code>：Object. The key is the style attribute and the value is the style value. The complete configuration is as follows:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字体&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12px,&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // font size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bold or not, true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    italic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Italic or not, true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    underline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Show underline or not, true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Whether to display strikethrough, true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#333&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // color</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>clear</code>：Is clear style</p></li><li><p><code>pure</code>：v0.9.4+, If set to true, only the text style will be formatted and will not be synchronized to the node&#39;s data</p></li></ul><p>Formats the currently selected text. The style settings will be synchronized to the data of the node.</p><h3 id="formatrangetext-range-config" tabindex="-1">formatRangeText(range, config = {}) <a class="header-anchor" href="#formatrangetext-range-config" aria-label="Permalink to &quot;formatRangeText(range, config = {})&quot;">​</a></h3><ul><li><code>range</code>：The range object of <code>Quill</code>, has the following format:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>config</code>：Same as <code>formatText</code> method</li></ul><p>Formats the text of the specified range.</p><h3 id="formatalltext-config" tabindex="-1">formatAllText(config = {}) <a class="header-anchor" href="#formatalltext-config" aria-label="Permalink to &quot;formatAllText(config = {})&quot;">​</a></h3><ul><li><code>config</code>：Same as <code>formatText</code> method</li></ul><p>Formats all text of the current edit node.</p><h3 id="removeformat" tabindex="-1">removeFormat() <a class="header-anchor" href="#removeformat" aria-label="Permalink to &quot;removeFormat()&quot;">​</a></h3><blockquote><p>v0.4.1+</p></blockquote><p>Clears the style of the currently selected text.</p><h3 id="normalstyletorichtextstyle-style" tabindex="-1">normalStyleToRichTextStyle(style) <a class="header-anchor" href="#normalstyletorichtextstyle-style" aria-label="Permalink to &quot;normalStyleToRichTextStyle(style)&quot;">​</a></h3><p>Converts a normal node style object to a rich text style object. Because there are differences between node style attributes and rich text style attributes during non-rich text editing, a conversion operation is required. For example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After conversion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="richtextstyletonormalstyle-config" tabindex="-1">richTextStyleToNormalStyle(config) <a class="header-anchor" href="#richtextstyletonormalstyle-config" aria-label="Permalink to &quot;richTextStyleToNormalStyle(config)&quot;">​</a></h3><p>Converts rich text style objects to normal node style objects. For example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After conversion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="handlesvgdomelements-svg" tabindex="-1">handleSvgDomElements(svg) <a class="header-anchor" href="#handlesvgdomelements-svg" aria-label="Permalink to &quot;handleSvgDomElements(svg)&quot;">​</a></h3><ul><li><code>svg</code>: <code>svg</code> node</li></ul><p>Convert the <code>dom</code> element embedded in the <code>svg</code> into a picture and return a <code>Promise</code>.</p><h3 id="transformallnodestonormalnode" tabindex="-1">transformAllNodesToNormalNode() <a class="header-anchor" href="#transformallnodestonormalnode" aria-label="Permalink to &quot;transformAllNodesToNormalNode()&quot;">​</a></h3><p>Convert all nodes to non-rich text nodes.</p>`,63),l=[n];function o(h,r,p,d,c,k){return i(),e("div",null,l)}const u=s(t,[["render",o]]);export{E as __pageData,u as default};
