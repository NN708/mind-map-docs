import{_ as e,o as a,c as t,a5 as n}from"./chunks/framework.D1Ej91Qw.js";const _=JSON.parse('{"title":"BatchExecution instance","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/batchExecution.md","filePath":"en/api/batchExecution.md"}'),o={name:"en/api/batchExecution.md"},c=n('<h1 id="batchexecution-instance" tabindex="-1">BatchExecution instance <a class="header-anchor" href="#batchexecution-instance" aria-label="Permalink to &quot;BatchExecution instance&quot;">​</a></h1><p>The <code>batchExecution</code> is used to batch asynchronously perform some operations, and if a certain operation is called multiple times at the same time, it will only be executed once in the next event loop. Can be obtained through <code>mindMap.batchExecution</code></p><h2 id="method" tabindex="-1">Method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;Method&quot;">​</a></h2><h3 id="push-name-fn" tabindex="-1">push(name, fn) <a class="header-anchor" href="#push-name-fn" aria-label="Permalink to &quot;push(name, fn)&quot;">​</a></h3><p>Add task.</p><p><code>name</code>: task name</p><p><code>fn</code>: task</p>',7),i=[c];function s(h,d,r,p,u,l){return a(),t("div",{"data-pagefind-body":!0},i)}const b=e(o,[["render",s]]);export{_ as __pageData,b as default};
