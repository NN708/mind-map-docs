import{_ as s,o as i,c as a,a5 as e}from"./chunks/framework.D1Ej91Qw.js";const g=JSON.parse('{"title":"RichText插件","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/richText.md","filePath":"plugins/richText.md"}'),l={name:"plugins/richText.md"},n=e(`<h1 id="richtext插件" tabindex="-1">RichText插件 <a class="header-anchor" href="#richtext插件" aria-label="Permalink to &quot;RichText插件&quot;">​</a></h1><blockquote><p>v0.4.0+</p></blockquote><p>该插件提供节点富文本编辑的能力，注册了即可生效。</p><p>默认节点编辑只能对节点内所有文本统一应用样式，通过该插件可以支持富文本编辑的效果，目前支持：加粗、斜体、下划线、删除线、字体、字号、颜色、背景颜色。不支持上划线、行高。</p><p>该插件的原理是使用<a href="https://github.com/quilljs/quill" target="_blank" rel="noreferrer">Quill</a>编辑器实现富文本编辑，然后把编辑后生成的<code>DOM</code>节点直接作为节点的文本数据，并且在渲染的时候通过<code>svg</code>的<code>foreignObject</code>标签嵌入<code>DOM</code>节点。</p><blockquote><p>v0.5.6即以前的版本存在以下提示：</p><p>这样也造成了一个问题，就是导出为图片的功能受到了影响，原本将<code>svg</code>导出为图片的原理很简单，获取到<code>svg</code>字符串，然后创建为<code>type=image/svg+xml</code>类型的<code>blob</code>数据，再使用<code>URL.createObjectURL</code>方法生成<code>data:url</code>数据，再创建一个<code>Image</code>标签，将<code>data:url</code>作为该图片的<code>src</code>，最后再将这个图片绘制到<code>canvas</code>对象上进行导出，但是经过测试，当<code>svg</code>中嵌入了<code>DOM</code>节点，这种方式导出会出错，并且尝试了多种方式后都无法实现完美的导出效果，目前的方式是遍历<code>svg</code>中的<code>foreignObject</code>节点，使用<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noreferrer">html2canvas</a>将<code>foreignObject</code>节点内的<code>DOM</code>节点转换为图片再替换掉<code>foreignObject</code>节点，这种方式可以工作，但是非常耗时，因为<code>html2canvas</code>转换一次的时间很长，导致转换一个节点都需要耗时差不多2秒，这样导致节点越多，转换时间越慢，所以如果无法忍受长时间的导出的话推荐不要使用该插件。</p></blockquote><blockquote><p><code>v0.5.7+</code>的版本直接使用<code>html2canvas</code>转换整个<code>svg</code>，速度不再是问题，但是目前存在一个<code>bug</code>，就是节点的颜色导出后不生效。</p></blockquote><p><code>v0.6.13+</code>版本使用<a href="https://github.com/1904labs/dom-to-image-more" target="_blank" rel="noreferrer">dom-to-image-more</a>替换了<code>html2canvas</code>，解决了节点的颜色导出后不生效的问题。</p><blockquote><p>dom-to-image-more兼容性比较差，在很多浏览器上导出图片都是空的，所以可以根据你自己的需求替换成html2canvas。</p></blockquote><p>从<code>0.6.16+</code>版本后不再使用<code>dom-to-image-more</code>、<code>html2canvas</code>之类的第三方库实现导出，兼容性及导出都不再有问题。</p><p>配置请参考<a href="./../api/constructor/constructor-options.html#_7-richtext插件">实例化选项</a>。</p><h2 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MindMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RichText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/plugins/RichText.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import RichText from &#39;simple-mind-map/src/RichText.js&#39; v0.6.0以下版本使用该路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RichText, opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>注册完且实例化<code>MindMap</code>后可通过<code>mindMap.richText</code>获取到该实例。</p><h3 id="注册选项" tabindex="-1">注册选项 <a class="header-anchor" href="#注册选项" aria-label="Permalink to &quot;注册选项&quot;">​</a></h3><p><code>opt</code>选项可以传递以下参数：</p><ul><li><code>opt.fontFamilyList</code></li></ul><p>替换富文本编辑时内置字体列表。内置的列表为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;宋体, SimSun, Songti SC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;微软雅黑, Microsoft YaHei&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;楷体, 楷体_GB2312, SimKai, STKaiti&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;黑体, SimHei, Heiti SC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;隶书, SimLi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;andale mono&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;arial, helvetica, sans-serif&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;arial black, avant garde&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;comic sans ms&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;impact, chicago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;times new roman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;sans-serif&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;serif&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li><code>opt.fontSizeList</code></li></ul><p>替换富文本编辑时内置字号列表。内置的列表为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="extendfont-list-cover-false" tabindex="-1">extendFont(list = [], cover = false) <a class="header-anchor" href="#extendfont-list-cover-false" aria-label="Permalink to &quot;extendFont(list = [], cover = false)&quot;">​</a></h3><blockquote><p>v0.8.6+</p></blockquote><ul><li><p><code>list</code>：要扩展的字体名称列表；</p></li><li><p><code>cover</code>：是否覆盖当前的字体列表，默认为<code>false</code>，即在当前字体列表后增加；</p></li></ul><p>动态扩展支持的字体。</p><h3 id="setnotactivenodestyle-node-style" tabindex="-1">setNotActiveNodeStyle(node, style) <a class="header-anchor" href="#setnotactivenodestyle-node-style" aria-label="Permalink to &quot;setNotActiveNodeStyle(node, style)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>style</code>：Object，样式对象。</li></ul><p>给未激活的节点设置富文本样式。</p><h3 id="selectall" tabindex="-1">selectAll() <a class="header-anchor" href="#selectall" aria-label="Permalink to &quot;selectAll()&quot;">​</a></h3><p>选中全部。当节点正在编辑中可以通过该方法选中节点内的所有文本。</p><h3 id="focus" tabindex="-1">focus() <a class="header-anchor" href="#focus" aria-label="Permalink to &quot;focus()&quot;">​</a></h3><blockquote><p>v0.4.7+</p></blockquote><p>聚焦。</p><h3 id="formattext-config-clear-false-pure-false" tabindex="-1">formatText(config = {}, clear = false, pure = false) <a class="header-anchor" href="#formattext-config-clear-false-pure-false" aria-label="Permalink to &quot;formatText(config = {}, clear = false, pure = false)&quot;">​</a></h3><ul><li><code>config</code>：对象，键为样式属性，值为样式值，完整的配置如下：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字体&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12px,&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 字号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否加粗，true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    italic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否斜体，true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    underline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否显示下划线，true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否显示删除线，true/false </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#333&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>clear</code>：是否是清除样式</p></li><li><p><code>pure</code>：v0.9.4+，如果设为true，那么仅会格式化文本样式，不会同步到节点的数据中</p></li></ul><p>格式化当前选中的文本。会将样式设置同步到节点的数据中。</p><h3 id="formatrangetext-range-config" tabindex="-1">formatRangeText(range, config = {}) <a class="header-anchor" href="#formatrangetext-range-config" aria-label="Permalink to &quot;formatRangeText(range, config = {})&quot;">​</a></h3><ul><li><code>range</code>：<code>Quill</code>的范围对象，格式如下：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>config</code>：同<code>formatText</code>方法</li></ul><p>格式化指定范围的文本。</p><h3 id="formatalltext-config" tabindex="-1">formatAllText(config = {}) <a class="header-anchor" href="#formatalltext-config" aria-label="Permalink to &quot;formatAllText(config = {})&quot;">​</a></h3><ul><li><code>config</code>：同<code>formatText</code>方法</li></ul><p>格式化当前编辑节点的所有文本。</p><h3 id="removeformat" tabindex="-1">removeFormat() <a class="header-anchor" href="#removeformat" aria-label="Permalink to &quot;removeFormat()&quot;">​</a></h3><blockquote><p>v0.4.1+</p></blockquote><p>清除当前选中文本的样式。</p><h3 id="normalstyletorichtextstyle-style" tabindex="-1">normalStyleToRichTextStyle(style) <a class="header-anchor" href="#normalstyletorichtextstyle-style" aria-label="Permalink to &quot;normalStyleToRichTextStyle(style)&quot;">​</a></h3><p>将普通节点样式对象转换成富文本样式对象。因为非富文本编辑时的节点样式属性和富文本样式属性是存在差异的，所以需要一个转换操作。比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换后</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="richtextstyletonormalstyle-config" tabindex="-1">richTextStyleToNormalStyle(config) <a class="header-anchor" href="#richtextstyletonormalstyle-config" aria-label="Permalink to &quot;richTextStyleToNormalStyle(config)&quot;">​</a></h3><p>将富文本样式对象转换成普通节点样式对象。比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换后</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="handlesvgdomelements-svg" tabindex="-1">handleSvgDomElements(svg) <a class="header-anchor" href="#handlesvgdomelements-svg" aria-label="Permalink to &quot;handleSvgDomElements(svg)&quot;">​</a></h3><ul><li><code>svg</code>： <code>svg</code>节点</li></ul><p>将<code>svg</code>中嵌入的<code>dom</code>元素转换成图片，返回一个<code>Promise</code>。</p><h3 id="transformallnodestonormalnode" tabindex="-1">transformAllNodesToNormalNode() <a class="header-anchor" href="#transformallnodestonormalnode" aria-label="Permalink to &quot;transformAllNodesToNormalNode()&quot;">​</a></h3><p>将所有节点转换成非富文本节点。</p>`,63),t=[n];function h(p,o,k,d,c,r){return i(),a("div",{"data-pagefind-body":!0},t)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
