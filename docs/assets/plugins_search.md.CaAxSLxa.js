import{_ as a,c as e,o as s,a4 as i}from"./chunks/framework.B358x4hV.js";const g=JSON.parse('{"title":"Search 插件","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/search.md","filePath":"plugins/search.md"}'),l={name:"plugins/search.md"},t=i(`<h1 id="search-插件" tabindex="-1">Search 插件 <a class="header-anchor" href="#search-插件" aria-label="Permalink to &quot;Search 插件&quot;">​</a></h1><blockquote><p>v0.6.9+</p></blockquote><p>该插件提供搜索和替换节点内容的功能。</p><p>配置请参考<a href="./../api/constructor/constructor-options.html#_10-search插件">实例化选项</a>。</p><h2 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MindMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Search </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;simple-mind-map/src/plugins/Search.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Search)</span></span></code></pre></div><p>注册完且实例化<code>MindMap</code>后可通过<code>mindMap.search</code>获取到该实例。</p><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><h3 id="search-info-change" tabindex="-1">search_info_change <a class="header-anchor" href="#search-info-change" aria-label="Permalink to &quot;search_info_change&quot;">​</a></h3><p>可以通过监听<code>search_info_change</code>事件来获取当前搜索结果的数量和当前定位到的索引。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search_info_change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        data: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            currentIndex,// 索引，从0开始</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            total</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="search-searchtext-callback" tabindex="-1">search(searchText, callback) <a class="header-anchor" href="#search-searchtext-callback" aria-label="Permalink to &quot;search(searchText, callback)&quot;">​</a></h3><ul><li><p><code>searchText</code>：要进行搜索的文本</p></li><li><p><code>callback</code>：本次搜索完成的回调函数，会在跳转到节点后触发</p></li></ul><p>搜索节点内容，可以重复调用，每调一次，会搜索和定位到下一个匹配的节点。如果搜索文本改变了，那么会重新搜索。</p><h3 id="endsearch" tabindex="-1">endSearch() <a class="header-anchor" href="#endsearch" aria-label="Permalink to &quot;endSearch()&quot;">​</a></h3><p>结束搜索。</p><h3 id="replace-replacetext-jumpnext-false" tabindex="-1">replace(replaceText, jumpNext = false) <a class="header-anchor" href="#replace-replacetext-jumpnext-false" aria-label="Permalink to &quot;replace(replaceText, jumpNext = false)&quot;">​</a></h3><ul><li><p><code>replaceText</code>：要进行替换的文本</p></li><li><p><code>jumpNext</code>：v0.6.12+，是否自动跳转到下一个匹配节点</p></li></ul><p>替换当前节点内容，要在调用了<code>search</code>方法之后调用，会替换当前定位到的匹配节点内容。</p><h3 id="replaceall-replacetext" tabindex="-1">replaceAll(replaceText) <a class="header-anchor" href="#replaceall-replacetext" aria-label="Permalink to &quot;replaceAll(replaceText)&quot;">​</a></h3><ul><li><code>replaceText</code>：要进行替换的文本</li></ul><p>替换所有匹配的节点内容，要在调用了<code>search</code>方法之后调用。</p><h3 id="getreplacedtext-node-searchtext-replacetext" tabindex="-1">getReplacedText(node, searchText, replaceText) <a class="header-anchor" href="#getreplacedtext-node-searchtext-replacetext" aria-label="Permalink to &quot;getReplacedText(node, searchText, replaceText)&quot;">​</a></h3><ul><li><p><code>node</code>：节点实例</p></li><li><p><code>searchText</code>：要进行搜索的文本</p></li><li><p><code>replaceText</code>：要进行替换的文本</p></li></ul><p>返回该节点搜索和替换后的文本内容，注意，不会实际改变节点内容，只是用来计算一个节点替换后的内容。</p>`,26),h=[t];function n(p,c,r,d,o,k){return s(),e("div",null,h)}const x=a(l,[["render",n]]);export{g as __pageData,x as default};
