import{_ as e,o as a,c as s,a5 as t}from"./chunks/framework.D1Ej91Qw.js";const m=JSON.parse('{"title":"KeyCommand instance","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/keyCommand.md","filePath":"en/api/keyCommand.md"}'),i={name:"en/api/keyCommand.md"},n=t(`<h1 id="keycommand-instance" tabindex="-1">KeyCommand instance <a class="header-anchor" href="#keycommand-instance" aria-label="Permalink to &quot;KeyCommand instance&quot;">​</a></h1><p>The <code>keyCommand</code> instance is responsible for adding and triggering shortcuts. It includes some built-in shortcuts and can also be added manually. The <code>mindMap.keyCommand</code> instance can be obtained through this.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="addshortcut-key-fn" tabindex="-1">addShortcut(key, fn) <a class="header-anchor" href="#addshortcut-key-fn" aria-label="Permalink to &quot;addShortcut(key, fn)&quot;">​</a></h3><p>Add a shortcut</p><p><code>key</code>: Shortcut key, key values can be viewed at <a href="https://github.com/wanglin2/mind-map/blob/main/simple-mind-map/src/core/command/keyMap.js" target="_blank" rel="noreferrer">keyMap.js</a> Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Single key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Del|Backspace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Combination key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Control+Enter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre></div><p><code>fn</code>: Method to be executed</p><h3 id="removeshortcut-key-fn" tabindex="-1">removeShortcut(key, fn) <a class="header-anchor" href="#removeshortcut-key-fn" aria-label="Permalink to &quot;removeShortcut(key, fn)&quot;">​</a></h3><p>Remove a shortcut command, if <code>fn</code> is not specified, all callback methods for the shortcut will be removed</p><h3 id="getshortcutfn-key" tabindex="-1">getShortcutFn(key) <a class="header-anchor" href="#getshortcutfn-key" aria-label="Permalink to &quot;getShortcutFn(key)&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>Get the processing function for the specified shortcut</p><h3 id="pause" tabindex="-1">pause() <a class="header-anchor" href="#pause" aria-label="Permalink to &quot;pause()&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>Pause all shortcut responses</p><h3 id="recovery" tabindex="-1">recovery() <a class="header-anchor" href="#recovery" aria-label="Permalink to &quot;recovery()&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>Restore shortcut responses</p><h3 id="save" tabindex="-1">save() <a class="header-anchor" href="#save" aria-label="Permalink to &quot;save()&quot;">​</a></h3><blockquote><p>v0.2.3+</p></blockquote><p>Save the current registered shortcut data, then clear the shortcut data</p><h3 id="restore" tabindex="-1">restore() <a class="header-anchor" href="#restore" aria-label="Permalink to &quot;restore()&quot;">​</a></h3><blockquote><p>v0.2.3+</p></blockquote><p>Restore saved shortcut data, then clear the cache data</p><h3 id="hascombinationkey-e" tabindex="-1">hasCombinationKey(e) <a class="header-anchor" href="#hascombinationkey-e" aria-label="Permalink to &quot;hasCombinationKey(e)&quot;">​</a></h3><blockquote><p>v0.6.13+</p></blockquote><ul><li><code>e</code>: Event object.</li></ul><p>Determine if the combination key has been pressed.</p>`,29),o=[n];function h(r,l,d,c,p,k){return a(),s("div",{"data-pagefind-body":!0},o)}const y=e(i,[["render",h]]);export{m as __pageData,y as default};
